import json
import logging
import sys
from datetime import datetime, timedelta
import os
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
import g4f

VERSION = "0.2.7-SMART"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s - UserID: %(user_id)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class CandyxPEBot:
    def __init__(self, vk_token: str, admin_chat_id: int):
        self.vk_token = vk_token
        self.admin_chat_id = admin_chat_id
        self.vk_session = self._init_vk_session()
        self.vk = self.vk_session.get_api()
        self.upload = vk_api.VkUpload(self.vk_session)
        self._validate_tokens()
        self.longpoll = VkLongPoll(self.vk_session)
        self.rules = self.load_rules()
        self.user_contexts = {}
        self.user_ai_mode = set()
        self.user_action_mode = {}
        self.user_human_mode = set()
        self.user_languages = self.load_languages()
        self.banned_users = {}
        self.agents = self.load_agents()
        self.system_prompt_template = (
            "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–∞–º —Å–µ—Ä–≤–µ—Ä–∞ CandyxPE. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n{rules}\n"
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –ª–∞–∫–æ–Ω–∏—á–µ–Ω, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω. –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. "
            "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–π, –æ—Ç–≤–µ—Ç—å: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"–°–≤—è–∑—å —Å –∞–≥–µ–Ω—Ç–æ–º\".' "
            "–ò–∑–±–µ–≥–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ * –≤ –æ—Ç–≤–µ—Ç–∞—Ö."
        )

    def _init_vk_session(self):
        try:
            return vk_api.VkApi(token=self.vk_token)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK —Å–µ—Å—Å–∏–∏: {e}", extra={'user_id': 'N/A'})
            raise

    def _validate_tokens(self):
        try:
            self.vk.users.get(user_ids=1)
        except Exception as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π VK —Ç–æ–∫–µ–Ω: {e}", extra={'user_id': 'N/A'})
            raise

    def load_rules(self):
        try:
            if not os.path.exists('candyxpe_rules.txt'):
                with open('candyxpe_rules.txt', 'w', encoding='utf-8') as file:
                    file.write("–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ CandyxPE –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            with open('candyxpe_rules.txt', 'r', encoding='utf-8') as file:
                rules = file.read().strip()
                if not rules:
                    logger.warning("–§–∞–π–ª –ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç", extra={'user_id': 'N/A'})
                    rules = "–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ CandyxPE –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                # Truncate rules to avoid token limits (approx 1000 chars for safety)
                if len(rules) > 1000:
                    rules = rules[:1000] + "... (–ø—Ä–∞–≤–∏–ª–∞ —É–∫–æ—Ä–æ—á–µ–Ω—ã)"
                    logger.warning("–ü—Ä–∞–≤–∏–ª–∞ —É–∫–æ—Ä–æ—á–µ–Ω—ã –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤", extra={'user_id': 'N/A'})
                logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {rules[:50]}...", extra={'user_id': 'N/A'})
                return rules
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}", extra={'user_id': 'N/A'})
            return "–ü—Ä–∞–≤–∏–ª–∞ CandyxPE –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

    def save_languages(self):
        try:
            with open('candyxpe_languages.json', 'w', encoding='utf-8') as file:
                json.dump(self.user_languages, file, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {e}", extra={'user_id': 'N/A'})

    def load_languages(self):
        try:
            if not os.path.exists('candyxpe_languages.json'):
                with open('candyxpe_languages.json', 'w', encoding='utf-8') as file:
                    json.dump({}, file)
            with open('candyxpe_languages.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤: {e}", extra={'user_id': 'N/A'})
            return {}

    def save_agents(self):
        try:
            with open('candyxpe_agents.json', 'w', encoding='utf-8') as file:
                json.dump(self.agents, file, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}", extra={'user_id': 'N/A'})

    def load_agents(self):
        try:
            if not os.path.exists('candyxpe_agents.json'):
                with open('candyxpe_agents.json', 'w', encoding='utf-8') as file:
                    json.dump({}, file)
            with open('candyxpe_agents.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}", extra={'user_id': 'N/A'})
            return {}

    def is_agent(self, user_id: int):
        return str(user_id) in self.agents

    def is_admin(self, user_id: int):
        return str(user_id) in self.agents and self.agents[str(user_id)].get("role") in ["admin", "manager"]

    def get_keyboard(self, mode="main", user_id=None):
        language = self.user_languages.get(str(user_id), "ru") if user_id else "ru"
        keyboards = {
            "main": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"ai_agent\"}", "label": "ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç"}, "color": "primary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"contact_agent\"}", "label": "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–≥–µ–Ω—Ç–æ–º"}, "color": "secondary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"report_staff\"}", "label": "üë§ –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"report_bug\"}", "label": "üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ"}, "color": "secondary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"change_language\"}", "label": "üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞"}, "color": "positive"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"ai_agent\"}", "label": "ü§ñ AI Agent"}, "color": "primary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"contact_agent\"}", "label": "üë®‚Äçüíª Contact Agent"}, "color": "secondary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"report_staff\"}", "label": "üë§ Report Staff"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"report_bug\"}", "label": "üêõ Report Bug"}, "color": "secondary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"change_language\"}", "label": "üåê Change Language"}, "color": "positive"}]
                    ]
                }
            },
            "ai": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"end_ai\"}", "label": "üîô –í—ã–π—Ç–∏ –∏–∑ –ò–ò"}, "color": "negative"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"end_ai\"}", "label": "üîô Exit AI"}, "color": "negative"}]
                    ]
                }
            },
            "human": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"end_human\"}", "label": "üîô –ù–∞–∑–∞–¥"}, "color": "negative"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"end_human\"}", "label": "üîô Back"}, "color": "negative"}]
                    ]
                }
            },
            "action": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "‚ùå –û—Ç–º–µ–Ω–∞"}, "color": "negative"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "‚ùå Cancel"}, "color": "negative"}]
                    ]
                }
            },
            "admin": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"manage_agents\"}", "label": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏"}, "color": "primary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"ban_user\"}", "label": "‚õî –ë–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"broadcast\"}", "label": "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô –ù–∞–∑–∞–¥"}, "color": "negative"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"manage_agents\"}", "label": "üë• Manage Agents"}, "color": "primary"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"ban_user\"}", "label": "‚õî User Bans"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"broadcast\"}", "label": "üì¢ Send Announcement"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô Back"}, "color": "negative"}]
                    ]
                }
            },
            "manage_agents": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"add_agent\"}", "label": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"remove_agent\"}", "label": "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô –ù–∞–∑–∞–¥"}, "color": "secondary"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"add_agent\"}", "label": "‚ûï Add Agent"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"remove_agent\"}", "label": "‚ûñ Remove Agent"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô Back"}, "color": "secondary"}]
                    ]
                }
            },
            "ban_user": {
                "ru": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"ban\"}", "label": "‚õî –ó–∞–±–∞–Ω–∏—Ç—å"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"unban\"}", "label": "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô –ù–∞–∑–∞–¥"}, "color": "secondary"}]
                    ]
                },
                "en": {
                    "one_time": False,
                    "buttons": [
                        [{"action": {"type": "text", "payload": "{\"command\": \"ban\"}", "label": "‚õî Ban"}, "color": "negative"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"unban\"}", "label": "‚úÖ Unban"}, "color": "positive"}],
                        [{"action": {"type": "text", "payload": "{\"command\": \"cancel\"}", "label": "üîô Back"}, "color": "secondary"}]
                    ]
                }
            }
        }
        if user_id and self.is_agent(user_id):
            keyboards["main"][language]["buttons"].insert(0, [
                {"action": {"type": "text", "payload": "{\"command\": \"admin_panel\"}", "label": "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if language == "ru" else "üõ† Admin Panel"}, "color": "positive"}
            ])
        try:
            keyboard = keyboards.get(mode, keyboards["main"])[language]
            json.dumps(keyboard, ensure_ascii=False)
            return keyboard
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ JSON –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã {mode}: {e}", extra={'user_id': user_id or 'N/A'})
            return keyboards["main"][language]

    def send_to_admin_chat(self, message: str, user_id: int, action_type: str, attachments=None):
        try:
            try:
                response = self.vk.messages.getConversationsById(peer_ids=2000000000 + self.admin_chat_id)
                if not response.get('items'):
                    logger.error(f"–ß–∞—Ç —Å ID {self.admin_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", extra={'user_id': user_id})
                    self.send_message(user_id, f"‚ùå –ß–∞—Ç —Å ID {self.admin_chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.", self.get_keyboard("main", user_id))
                    return False
            except vk_api.exceptions.ApiError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É {self.admin_chat_id}: {e} (–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.code})", extra={'user_id': user_id})
                if e.code == 917:
                    self.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ —á–∞—Ç.", self.get_keyboard("main", user_id))
                elif e.code == 912:
                    self.send_message(user_id, "‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!", self.get_keyboard("main", user_id))
                elif e.code == 27:
                    self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", self.get_keyboard("main", user_id))
                else:
                    self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {str(e)} (–ö–æ–¥: {e.code}).", self.get_keyboard("main", user_id))
                return False

            user_info = f"\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: [id{user_id}|id{user_id}]"
            try:
                user_data = self.vk.users.get(user_ids=user_id)[0]
                user_info = f"\nüë§ –ü—Ä–æ—Ñ–∏–ª—å: [id{user_id}|{user_data['first_name']} {user_data['last_name']}]"
            except Exception:
                pass
            prefix = {
                "staff": "üö® –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ",
                "bug": "üêõ –°–û–û–ë–©–ï–ù–ò–ï –û –ë–ê–ì–ï",
                "agent": "‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ê–ì–ï–ù–¢–ê",
                "broadcast": "üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï",
                "ban": "‚õî –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
                "unban": "‚úÖ –†–ê–ó–ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
                "add_agent": "‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê",
                "remove_agent": "‚ûñ –£–î–ê–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê"
            }.get(action_type, "‚úÖ –°–û–û–ë–©–ï–ù–ò–ï")
            params = {
                "chat_id": self.admin_chat_id,
                "message": f"{prefix}{user_info}\n\n{message}",
                "random_id": get_random_id()
            }
            if attachments:
                params["attachment"] = ",".join(attachments)
            try:
                self.vk.messages.send(**params)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (—Ç–∏–ø: {action_type}): {message}", extra={'user_id': user_id})
                return True
            except vk_api.exceptions.ApiError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e} (–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.code})", extra={'user_id': user_id})
                if e.code == 917:
                    self.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ —á–∞—Ç.", self.get_keyboard("main", user_id))
                elif e.code == 912:
                    self.send_message(user_id, "‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!", self.get_keyboard("main", user_id))
                else:
                    self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {str(e)} (–ö–æ–¥: {e.code}).", self.get_keyboard("main", user_id))
                return False
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}", extra={'user_id': user_id})
                self.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", self.get_keyboard("main", user_id))
                return False
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_to_admin_chat: {e}", extra={'user_id': user_id})
            self.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", self.get_keyboard("main", user_id))
            return False

    def send_broadcast(self, message: str, sender_id: int):
        language = self.user_languages.get(str(sender_id), "ru")
        try:
            if not self.is_admin(sender_id):
                self.send_message(sender_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚õî Access denied.", self.get_keyboard("admin", sender_id))
                return False
            sent_count = 0
            failed_users = []
            for user_id in self.user_languages:
                if int(user_id) not in self.banned_users:
                    try:
                        user_language = self.user_languages.get(str(user_id), "ru")
                        self.send_message(int(user_id), f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç CandyxPE:\n{message}" if user_language == "ru" else f"üì¢ Announcement from CandyxPE:\n{message}")
                        sent_count += 1
                    except Exception as e:
                        failed_users.append(user_id)
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", extra={'user_id': sender_id})
            if failed_users:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(failed_users)}", extra={'user_id': sender_id})
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", extra={'user_id': sender_id})
            self.send_to_admin_chat(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º." if language == "ru" else f"Announcement sent to {sent_count} users.", sender_id, "broadcast")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}", extra={'user_id': sender_id})
            return False

    def send_message(self, user_id: int, message: str, keyboard=None, attachment=None):
        language = self.user_languages.get(str(user_id), "ru")
        messages = {
            "ru": {
                "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CandyxPE!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                "unknown_command": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
                "ai_activated": "ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.",
                "agent_request": "‚åõ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∞–≥–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–∑–±–æ—Ä.",
                "human_mode": "üë®‚Äçüíª –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∞–≥–µ–Ω—Ç—É. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.",
                "human_exit": "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –±–æ—Ç–∞.",
                "report_staff": "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:",
                "report_bug": "üêõ –°–æ–æ–±—â–∏—Ç–µ –æ –±–∞–≥–µ\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
                "language_changed": "üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {language}.",
                "exit_ai": "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò.",
                "cancel": "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                "admin_denied": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
                "admin_panel": "üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                "manage_agents": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                "ban_user": "‚õî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                "broadcast": "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                "add_agent": "‚ûï –í–≤–µ–¥–∏—Ç–µ ID –∏ —Ä–æ–ª—å (agent/admin/manager, –Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 agent'):",
                "remove_agent": "‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏:",
                "ban": "‚õî –í–≤–µ–¥–∏—Ç–µ ID –∏ —á–∞—Å—ã –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 24'):",
                "unban": "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
                "no_input": "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
                "report_sent": "‚úÖ {type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                "report_failed": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {type}.",
                "broadcast_sent": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                "broadcast_failed": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                "self_agent": "‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è.",
                "already_agent": "‚ùå id{agent_id} —É–∂–µ –∞–≥–µ–Ω—Ç.",
                "agent_added": "‚úÖ {role} id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.",
                "agent_added_notify": "‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã {role}–æ–º CandyxPE!",
                "self_remove": "‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–æ–ª—å —Å —Å–µ–±—è.",
                "agent_removed": "‚úÖ {role} id{agent_id} —Å–Ω—è—Ç.",
                "agent_removed_notify": "‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ {role} CandyxPE.",
                "not_agent": "‚ùå id{agent_id} –Ω–µ –∞–≥–µ–Ω—Ç.",
                "invalid_format": "‚ùå –§–æ—Ä–º–∞—Ç: {format}. –ü—Ä–∏–º–µ—Ä: '{example}'. –û—à–∏–±–∫–∞: {error}",
                "invalid_id": "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
                "self_ban": "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è.",
                "agent_ban": "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞.",
                "banned": "‚õî id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.",
                "banned_notify": "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours} —á–∞—Å–æ–≤.",
                "unbanned": "‚úÖ id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.",
                "unbanned_notify": "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
                "not_banned": "‚ùå id{target_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.",
                "banned_user": "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "chat_unavailable": "‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "error": "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            },
            "en": {
                "welcome": "üëã Welcome to CandyxPE!\nChoose an action:",
                "unknown_command": "‚ùå Unknown command.",
                "ai_activated": "ü§ñ AI Agent activated! Ask your questions.",
                "agent_request": "‚åõ Your request is being processed! We're sure an agent will join soon.\n\nDescribe the situation in more detail to speed up the process.",
                "human_mode": "üë®‚Äçüíª You are connected to an agent. Describe your issue.",
                "human_exit": "üëã You have returned to bot mode.",
                "report_staff": "‚ö†Ô∏è Staff Complaint\nDescribe the situation:",
                "report_bug": "üêõ Report a Bug\nDescribe the issue:",
                "language_changed": "üåê Language changed to {language}.",
                "exit_ai": "üëã You have exited AI mode.",
                "cancel": "‚úÖ Action canceled.",
                "admin_denied": "‚õî Access denied.",
                "admin_panel": "üõ† Admin Panel\nChoose an action:",
                "manage_agents": "üë• Manage Agents\nChoose an action:",
                "ban_user": "‚õî User Bans\nChoose an action:",
                "broadcast": "üì¢ Enter the announcement text:",
                "add_agent": "‚ûï Enter ID and role (agent/admin/manager, e.g., '123456 agent'):",
                "remove_agent": "‚ûñ Enter ID to remove role:",
                "ban": "‚õî Enter ID and ban hours (e.g., '123456 24'):",
                "unban": "‚úÖ Enter ID to unban:",
                "no_input": "‚ùå Enter data.",
                "report_sent": "‚úÖ {type} sent.",
                "report_failed": "‚ùå Failed to send {type}.",
                "broadcast_sent": "üì¢ Announcement sent!",
                "broadcast_failed": "‚ùå Failed to send announcement.",
                "self_agent": "‚ùå Cannot assign yourself.",
                "already_agent": "‚ùå id{agent_id} is already an agent.",
                "agent_added": "‚úÖ {role} id{agent_id} assigned.",
                "agent_added_notify": "‚úÖ You have been assigned as {role} of CandyxPE!",
                "self_remove": "‚ùå Cannot remove your own role.",
                "agent_removed": "‚úÖ {role} id{agent_id} removed.",
                "agent_removed_notify": "‚ùå You are no longer a {role} of CandyxPE.",
                "not_agent": "‚ùå id{agent_id} is not an agent.",
                "invalid_format": "‚ùå Format: {format}. Example: '{example}'. Error: {error}",
                "invalid_id": "‚ùå Enter a valid ID.",
                "self_ban": "‚ùå Cannot ban yourself.",
                "agent_ban": "‚ùå Cannot ban an agent.",
                "banned": "‚õî id{target_id} banned for {hours} hours.",
                "banned_notify": "‚õî You are banned for {hours} hours.",
                "unbanned": "‚úÖ id{target_id} unbanned.",
                "unbanned_notify": "‚úÖ You have been unbanned.",
                "not_banned": "‚ùå id{target_id} is not banned.",
                "banned_user": "‚õî You are banned. Try again later.",
                "chat_unavailable": "‚ùå Admin chat unavailable. Try again later.",
                "error": "‚ùå Error. Try again."
            }
        }
        try:
            params = {'user_id': user_id, 'message': message, 'random_id': get_random_id()}
            if keyboard:
                params['keyboard'] = json.dumps(keyboard, ensure_ascii=False)
            if attachment:
                params['attachment'] = attachment
            self.vk.messages.send(**params)
        except vk_api.exceptions.ApiError as e:
            if e.code == 912:
                logger.error("–û—à–∏–±–∫–∞ 912: –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!", extra={'user_id': user_id})
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} (–ö–æ–¥: {e.code})", extra={'user_id': user_id})
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})

    def get_ai_response(self, user_id: int, user_message: str):
        language = self.user_languages.get(str(user_id), "ru")
        try:
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            self.user_contexts[user_id].append({"role": "user", "content": user_message})
            if len(self.user_contexts[user_id]) > 5:
                self.user_contexts[user_id] = self.user_contexts[user_id][-5:]
            # Re-load rules to ensure freshness
            rules = self.load_rules()
            system_prompt = self.system_prompt_template.format(rules=rules)
            messages = [{"role": "system", "content": system_prompt}] + self.user_contexts[user_id]
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ g4f —Å prompt: {system_prompt[:100]}...", extra={'user_id': user_id})
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                max_tokens=300,
                temperature=0.5,
                timeout=30
            )
            if isinstance(response, str) and response.strip():
                self.user_contexts[user_id].append({"role": "assistant", "content": response})
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç g4f: {response[:50]}...", extra={'user_id': user_id})
                return response
            else:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç g4f: {response}", extra={'user_id': user_id})
                return (
                    "‚ùå –û—à–∏–±–∫–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É."
                    if language == "ru"
                    else "‚ùå AI error. Try again later or contact an agent."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ get_ai_response: {e}", extra={'user_id': user_id})
            return (
                "‚ùå –û—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ CandyxPE."
                if language == "ru"
                else "‚ùå Error. Contact CandyxPE support."
            )

    def handle(self, user_id: int, command: str):
        language = self.user_languages.get(str(user_id), "ru")
        commands = {
            "ai_agent": lambda: (self.user_ai_mode.add(user_id), self.user_human_mode.discard(user_id), self.send_message(user_id, "ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã." if language == "ru" else "ü§ñ AI Agent activated! Ask your questions.", self.get_keyboard("ai", user_id))),
            "contact_agent": lambda: (
                self.user_human_mode.add(user_id),
                self.user_ai_mode.discard(user_id),
                self.send_to_admin_chat("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∞–≥–µ–Ω—Ç—É." if language == "ru" else "User connected to an agent.", user_id, "agent"),
                self.send_message(user_id, "üë®‚Äçüíª –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∞–≥–µ–Ω—Ç—É. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É." if language == "ru" else "üë®‚Äçüíª You are connected to an agent. Describe your issue.", self.get_keyboard("human", user_id))
            ),
            "end_human": lambda: (
                self.user_human_mode.discard(user_id),
                self.send_message(user_id, "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –±–æ—Ç–∞." if language == "ru" else "üëã You have returned to bot mode.", self.get_keyboard("main", user_id))
            ),
            "report_staff": lambda: (self.user_action_mode.update({user_id: "staff"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:" if language == "ru" else "‚ö†Ô∏è Staff Complaint\nDescribe the situation:", self.get_keyboard("action", user_id))),
            "report_bug": lambda: (self.user_action_mode.update({user_id: "bug"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "üêõ –°–æ–æ–±—â–∏—Ç–µ –æ –±–∞–≥–µ\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:" if language == "ru" else "üêõ Report a Bug\nDescribe the issue:", self.get_keyboard("action", user_id))),
            "change_language": lambda: (
                self.user_languages.update({str(user_id): "en" if self.user_languages.get(str(user_id), "ru") == "ru" else "ru"}),
                self.save_languages(),
                self.send_message(user_id, f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–†—É—Å—Å–∫–∏–π' if self.user_languages[str(user_id)] == 'ru' else 'English'}." if language == "ru" else f"üåê Language changed to {'Russian' if self.user_languages[str(user_id)] == 'ru' else 'English'}.", self.get_keyboard("main", user_id))
            ),
            "end_ai": lambda: (self.user_ai_mode.discard(user_id), self.user_action_mode.pop(user_id, None), self.user_contexts.pop(user_id, None), self.user_human_mode.discard(user_id), self.send_message(user_id, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò." if language == "ru" else "üëã You have exited AI mode.", self.get_keyboard("main", user_id))),
            "cancel": lambda: (self.user_action_mode.pop(user_id, None), self.user_ai_mode.discard(user_id), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." if language == "ru" else "‚úÖ Action canceled.", self.get_keyboard("main", user_id))),
            "admin_panel": lambda: self.send_message(user_id, "üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "üõ† Admin Panel\nChoose an action:", self.get_keyboard("admin", user_id)) if self.is_agent(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("main", user_id)),
            "manage_agents": lambda: self.send_message(user_id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "üë• Manage Agents\nChoose an action:", self.get_keyboard("manage_agents", user_id)) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "ban_user": lambda: self.send_message(user_id, "‚õî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "‚õî User Bans\nChoose an action:", self.get_keyboard("ban_user", user_id)) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "broadcast": lambda: (self.user_action_mode.update({user_id: "broadcast"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:" if language == "ru" else "üì¢ Enter the announcement text:", self.get_keyboard("action", user_id))) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "add_agent": lambda: (self.user_action_mode.update({user_id: "add_agent"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚ûï –í–≤–µ–¥–∏—Ç–µ ID –∏ —Ä–æ–ª—å (agent/admin/manager, –Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 agent'):" if language == "ru" else "‚ûï Enter ID and role (e.g., '123456 agent'):", self.get_keyboard("action", user_id))) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "remove_agent": lambda: (self.user_action_mode.update({user_id: "remove_agent"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏:" if language == "ru" else "‚ûñ Enter ID to remove role:", self.get_keyboard("action", user_id))) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "ban": lambda: (self.user_action_mode.update({user_id: "ban"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚õî –í–≤–µ–¥–∏—Ç–µ ID –∏ —á–∞—Å—ã –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 24'):" if language == "ru" else "‚õî Enter ID and ban hours (e.g., '123456 24'):", self.get_keyboard("action", user_id))) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id)),
            "unban": lambda: (self.user_action_mode.update({user_id: "unban"}), self.user_human_mode.discard(user_id), self.send_message(user_id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:" if language == "ru" else "‚úÖ Enter ID to unban:", self.get_keyboard("action", user_id))) if self.is_admin(user_id) else self.send_message(user_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω." if language == "ru" else "‚ùå Access denied.", self.get_keyboard("admin", user_id))
        }
        action = commands.get(command)
        if action:
            action()
        else:
            self.send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞." if language == "ru" else "‚ùå Unknown command.", self.get_keyboard("main", user_id))

    def process_message(self, event):
        user_id = event.user_id
        text = event.text.strip() if event.text else ""
        language = self.user_languages.get(str(user_id), "ru")
        try:
            if event.from_chat:
                return
            self.banned_users = {k: v for k, v in self.banned_users.items() if datetime.now() < v}
            if user_id in self.banned_users:
                self.send_message(user_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == "ru" else "‚õî You are banned. Try again later.", self.get_keyboard("main", user_id))
                return
            try:
                if hasattr(event, 'payload') and event.payload:
                    payload = json.loads(event.payload)
                    if "command" in payload:
                        self.handle(user_id, payload["command"])
                        return
            except json.JSONDecodeError:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: {event.payload}", extra={'user_id': user_id})
            if user_id in self.user_human_mode:
                if text:
                    attachments = []
                    if hasattr(event, 'attachments') and event.attachments.get("attachments"):
                        for att in event.attachments["attachments"]:
                            if att["type"] in ["photo", "video"]:
                                attachments.append(f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}")
                    self.send_to_admin_chat(text, user_id, "agent", attachments)
                return
            if user_id in self.user_action_mode:
                action_type = self.user_action_mode[user_id]
                if not text:
                    self.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ." if language == "ru" else "‚ùå Enter data.", self.get_keyboard("action", user_id))
                    return
                if action_type in ["staff", "bug"]:
                    attachments = []
                    if hasattr(event, 'attachments') and event.attachments.get("attachments"):
                        for att in event.attachments["attachments"]:
                            if att["type"] in ["photo", "video"]:
                                attachments.append(f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}")
                    if self.send_to_admin_chat(text, user_id, action_type, attachments):
                        self.send_message(user_id, f"‚úÖ {'–ñ–∞–ª–æ–±–∞' if action_type == 'staff' else '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ'} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." if language == "ru" else f"‚úÖ {'Complaint' if action_type == 'staff' else 'Bug report'} sent.", self.get_keyboard("main", user_id))
                    else:
                        self.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {'–∂–∞–ª–æ–±—ã' if action_type == 'staff' else '—Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–µ'}." if language == "ru" else f"‚ùå Failed to send {'complaint' if action_type == 'staff' else 'bug report'}.", self.get_keyboard("main", user_id))
                    self.user_action_mode.pop(user_id, None)
                elif action_type == "broadcast":
                    if self.send_broadcast(text, user_id):
                        self.send_message(user_id, "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" if language == "ru" else "üì¢ Announcement sent!", self.get_keyboard("admin", user_id))
                    else:
                        self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è." if language == "ru" else "‚ùå Failed to send announcement.", self.get_keyboard("admin", user_id))
                    self.user_action_mode.pop(user_id, None)
                elif action_type == "add_agent":
                    try:
                        parts = text.split()
                        if len(parts) != 2 or parts[1] not in ["agent", "admin", "manager"]:
                            raise ValueError("–§–æ—Ä–º–∞—Ç: <ID> <agent/admin/manager>")
                        agent_id, role = int(parts[0]), parts[1]
                        if agent_id == user_id:
                            self.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è." if language == "ru" else "‚ùå Cannot assign yourself.", self.get_keyboard("manage_agents", user_id))
                        elif str(agent_id) in self.agents:
                            self.send_message(user_id, f"‚ùå id{agent_id} —É–∂–µ –∞–≥–µ–Ω—Ç." if language == "ru" else f"‚ùå id{agent_id} is already an agent.", self.get_keyboard("manage_agents", user_id))
                        else:
                            self.agents[str(agent_id)] = {"role": role}
                            self.save_agents()
                            self.send_message(user_id, f"‚úÖ {role.capitalize()} id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω." if language == "ru" else f"‚úÖ {role.capitalize()} id{agent_id} assigned.", self.get_keyboard("admin", user_id))
                            self.send_message(agent_id, f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã {role}–æ–º CandyxPE!" if language == "ru" else f"‚úÖ You have been assigned as {role} of CandyxPE!", self.get_keyboard("main", agent_id))
                            self.send_to_admin_chat(f"{role.capitalize()} id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.", user_id, "add_agent")
                        self.user_action_mode.pop(user_id, None)
                    except ValueError as e:
                        self.send_message(user_id, f"‚ùå –§–æ—Ä–º–∞—Ç: <ID> <agent/admin/manager>. –ü—Ä–∏–º–µ—Ä: '123456 agent'. –û—à–∏–±–∫–∞: {e}" if language == "ru" else f"‚ùå Format: <ID> <agent/admin/manager>. Example: '123456 agent'. Error: {e}", self.get_keyboard("action", user_id))
                elif action_type == "remove_agent":
                    try:
                        agent_id = int(text)
                        if agent_id == user_id:
                            self.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–æ–ª—å —Å —Å–µ–±—è." if language == "ru" else "‚ùå Cannot remove your own role.", self.get_keyboard("manage_agents", user_id))
                        elif str(agent_id) in self.agents:
                            role = self.agents[str(agent_id)].get("role", "agent")
                            del self.agents[str(agent_id)]
                            self.save_agents()
                            self.send_message(user_id, f"‚úÖ {role.capitalize()} id{agent_id} —Å–Ω—è—Ç." if language == "ru" else f"‚úÖ {role.capitalize()} id{agent_id} removed.", self.get_keyboard("admin", user_id))
                            self.send_message(agent_id, f"‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ {role} CandyxPE." if language == "ru" else f"‚ùå You are no longer a {role} of CandyxPE.", self.get_keyboard("main", agent_id))
                            self.send_to_admin_chat(f"{role.capitalize()} id{agent_id} —Å–Ω—è—Ç.", user_id, "remove_agent")
                        else:
                            self.send_message(user_id, f"‚ùå id{agent_id} –Ω–µ –∞–≥–µ–Ω—Ç." if language == "ru" else f"‚ùå id{agent_id} is not an agent.", self.get_keyboard("manage_agents", user_id))
                        self.user_action_mode.pop(user_id, None)
                    except ValueError:
                        self.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID." if language == "ru" else "‚ùå Enter a valid ID.", self.get_keyboard("action", user_id))
                elif action_type == "ban":
                    try:
                        parts = text.split()
                        if len(parts) != 2:
                            raise ValueError
                        target_id, hours = int(parts[0]), int(parts[1])
                        if target_id == user_id:
                            self.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è." if language == "ru" else "‚ùå Cannot ban yourself.", self.get_keyboard("ban_user", user_id))
                        elif self.is_agent(target_id):
                            self.send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞." if language == "ru" else "‚ùå Cannot ban an agent.", self.get_keyboard("ban_user", user_id))
                        else:
                            self.banned_users[target_id] = datetime.now() + timedelta(hours=hours)
                            self.send_message(user_id, f"‚õî id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤." if language == "ru" else f"‚õî id{target_id} banned for {hours} hours.", self.get_keyboard("ban_user", user_id))
                            self.send_message(target_id, f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours} —á–∞—Å–æ–≤." if language == "ru" else f"‚õî You are banned for {hours} hours.", self.get_keyboard("main", target_id))
                            self.send_to_admin_chat(f"id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.", user_id, "ban")
                        self.user_action_mode.pop(user_id, None)
                    except ValueError:
                        self.send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç: <ID> <—á–∞—Å—ã>. –ü—Ä–∏–º–µ—Ä: '123456 24'" if language == "ru" else "‚ùå Format: <ID> <hours>. Example: '123456 24'", self.get_keyboard("action", user_id))
                elif action_type == "unban":
                    try:
                        target_id = int(text)
                        if target_id in self.banned_users:
                            del self.banned_users[target_id]
                            self.send_message(user_id, f"‚úÖ id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω." if language == "ru" else f"‚úÖ id{target_id} unbanned.", self.get_keyboard("ban_user", user_id))
                            self.send_message(target_id, "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã." if language == "ru" else "‚úÖ You have been unbanned.", self.get_keyboard("main", target_id))
                            self.send_to_admin_chat(f"id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", user_id, "unban")
                        else:
                            self.send_message(user_id, f"‚ùå id{target_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω." if language == "ru" else f"‚ùå id{target_id} is not banned.", self.get_keyboard("ban_user", user_id))
                        self.user_action_mode.pop(user_id, None)
                    except ValueError:
                        self.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID." if language == "ru" else "‚ùå Enter a valid ID.", self.get_keyboard("action", user_id))
                return
            if user_id in self.user_ai_mode:
                if text.lower() in ["–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø", "exit", "stop"]:
                    self.handle(user_id, "end_ai")
                else:
                    if text:
                        ai_response = self.get_ai_response(user_id, text)
                        self.send_message(user_id, ai_response, self.get_keyboard("ai", user_id))
                    else:
                        self.send_message(user_id, "‚ùå –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å." if language == "ru" else "‚ùå Ask a question.", self.get_keyboard("ai", user_id))
                return
            if text.lower() in ["–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "start", "hello"]:
                self.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CandyxPE!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "üëã Welcome to CandyxPE!\nChoose an action:", self.get_keyboard("main", user_id))
            else:
                self.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "‚ùå Choose an action:", self.get_keyboard("main", user_id))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if language == "ru" else "‚ùå Error. Try again.", self.get_keyboard("main", user_id))

    def run(self):
        print(f"\nüöÄ –ë–æ—Ç CandyxPE v{VERSION} –∑–∞–ø—É—â–µ–Ω!")
        print("----------------------------------------")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ CandyxPE by vatkovskydev")
        print("----------------------------------------\n")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...", extra={'user_id': None})
        while True:
            try:
                for event in self.longpoll.listen():
                    if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                        self.process_message(event)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ LongPoll: {e}", extra={'user_id': 'N/A'})
                import time
                time.sleep(5)

if __name__ == "__main__":
    VK_TOKEN = "vk1.a.IAJHsMURMhJUYjKv8vXQPcTBxd5bwprhsnvJU1MyZwSSgtiUCGnTaKtOdB_qA8e5zdJ6q5fhjBeeVnBs8yYrOyl7wo0ArOLddIIaEurZwQpnw9oJzrARoiGCnuYV7Scvl5Jcg_fLrXH7FJF20q00b0VeccLRL8I8bgDQ1CeJGMl3q3q4ZMliMN6KD2W2mOQ4HtJNmH64d7aK6P4_er0tJQ"
    ADMIN_CHAT_ID = 1
    bot = CandyxPEBot(VK_TOKEN, ADMIN_CHAT_ID)
    bot.run()
