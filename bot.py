import json
import logging
import sys
import time
from datetime import datetime, timedelta
import os
from functools import lru_cache
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
import g4f

VERSION = "0.3.7-BETA"
CODE_NAME = "MASSIVE-RU-OPTIMIZED"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s - User: %(user_id)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class VkApiWrapper:
    def __init__(self, vk_api):
        self.vk_api = vk_api
        self.last_call = 0
        self.rate_limit = 0.34

    def call(self, method, **kwargs):
        now = time.time()
        if now - self.last_call < self.rate_limit:
            time.sleep(self.rate_limit - (now - self.last_call))
        self.last_call = time.time()
        try:
            return getattr(self.vk_api, method)(**kwargs)
        except Exception as e:
            logger.error(f"VK API error in {method}: {e}", extra={'user_id': 'N/A'})
            raise

class CandyxPEBot:
    _MESSAGES = {
        "welcome": "üòò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –Ω–∞—à–µ–≥–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!\n\n–î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞—à–µ–π –ø–µ—Ä–µ–¥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—à–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –≤–µ–∫—Ç–æ—Ä—É –∞–º–±–∏—Ü–∏–π –∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Ü–µ–ª–µ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫.\n\n‚ï∞‚îÄ> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Äî —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
        "unknown": "‚ñ∏ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –í–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
        "ai_on": "ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.",
        "human_on": "üì£ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –í–∞—à –∫–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n\n–ü—Ä–æ—à—É –í–∞—Å –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç—å —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–µ—à–µ–Ω–∏—é. –í–∞—à–µ —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤—ã—Å–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
        "human_off": "‚ñ∏ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        "report_staff": "‚¶ø –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n‚ñ∏ –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–µ–ª–∞. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç–µ —Ñ–∞–∫—Ç—ã, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
        "report_bug": "*Ô∏è‚É£ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –Ω–µ–¥–æ—á–µ—Ç–∞ –∏–ª–∏ –æ–ø–ª–æ—à–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≥–µ–Ω—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
        "ai_off": "‚ú± –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å—Ä–µ–¥—É –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –ï—Å–ª–∏ —É –í–∞—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.",
        "cancel": "‚ñ∏ –î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        "admin_denied": "‚ï∞‚îÄ> –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥.",
        "admin_panel": "‚ñ™Ô∏è–í—ã –ø–æ–ø–∞–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è [vk.com/candyxhelp|—Å–ª—É–∂–±—ã –ü–æ–¥–¥–µ—Ä–∂–∫–∏] –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.",
        "manage_agents": "‚óæ –ù–∞–¥–∑–æ—Ä –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ —Å–ª—É–∂–±—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.",
        "ban_user": "‚¶ø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.\n\n‚ï∞‚îÄ> –î–æ—Ä–æ–≥–∏–µ –∫–æ–ª–ª–µ–≥–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [vk.com/topic-230626581_54557249|–ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞], —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç [vk.com/id763589554|–°–ï–û] –∏–ª–∏ [vk.com/id1044729621|–°–û–û].",
        "broadcast": "‚óæ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        "add_agent": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑–µ—Ü: '123456789 (agent/admin/manager)'\n\n‚ï∞‚îÄ> –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: regvk.com/id.",
        "remove_agent": "‚ñ∏ –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å —É –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "ban": "‚óæ –£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —á–∞—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑–µ—Ü: '123456789 24'. \n\n‚ï∞‚îÄ> –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤: regvk.com/id.",
        "unban": "‚ú± –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
        "no_input": "‚ñ∏ –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.",
        "report_staff_sent": "‚ñ∏ –ñ–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ö–æ–≥–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –æ–Ω —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.",
        "report_bug_sent": "‚ñ∏ –ù–µ–¥–æ—á—ë—Ç –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–µ—Ç–∞–ª—è–º. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–∞–∫ –≤–µ—Ä–Ω—ã–µ –±–ª—é—Å—Ç–∏—Ç–µ–ª–∏ –ø—Ä–∞–≤–∏–ª, –≥–æ—Ç–æ–≤—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è.",
        "report_staff_failed": "‚ñ∏ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π.",
        "report_bug_failed": "‚ñ∏ –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—á–µ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π.",
        "broadcast_sent": "‚¶ø –î–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!",
        "broadcast_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É.",
        "self_agent": "‚óæ –í—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "already_agent": "‚ï∞‚îÄ> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{agent_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "agent_added": "‚ï∞‚îÄ> {role} @id{agent_id} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å.",
        "self_remove": "‚ñ∏ –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è —Ä–æ–ª—å.",
        "agent_removed": "‚ï∞‚îÄ> {role} @id{agent_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "not_agent": "‚¶ø –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ @id{agent_id} —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏? –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞, —á—Ç–æ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
        "invalid_format": "‚ñ∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {text}. –ü—Ä–∏–º–µ—Ä: '{example}'.",
        "invalid_id": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.",
        "self_ban": "‚ï∞‚îÄ> –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.",
        "agent_ban": "‚ï∞‚îÄ> –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "banned": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!\n\n‚ï∞‚îÄ> –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª: @id{target_id}\n‚ï∞‚îÄ> –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {hours} —á–∞—Å(-–æ–≤).",
        "banned_notify": "‚ñ∏ –ù–ê–õ–û–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê\n\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: [vk.com/topic-230626581_54606105|–Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏—è].\n‚ï∞‚îÄ> –°—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {hours} —á–∞—Å(-–æ–≤).\n\n–ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ [vk.com/id763589554|–°–ï–û] –∏–ª–∏ [vk.com/id1044729621|–°–û–û].",
        "unbanned": "‚óæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{target_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "unbanned_notify": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê\n\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: –ø–æ —Ä–µ—à–µ–Ω–∏—é –≤—ã—à–µ—Å—Ç–æ—è—â–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.",
        "not_banned": "‚ñ∏ –°–æ–∂–∞–ª–µ–µ–º, –Ω–æ @id{target_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.",
        "banned_user": "‚ñ∏ –ü–æ–∫–∞ –Ω–∞–ª–æ–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π.",
        "chat_unavailable": "‚¶ø –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ [vk.com/id1044729621|–°–û–û].",
        "error": "‚óæ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "get_agents": "‚ñ∏ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n{agents_list}",
        "version": "‚¶ø –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: {version} ({code_name})",
        "stats": "‚ñ∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {sessions}\n–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {bans}",
        "message_too_long": "‚óæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. 4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —Ç–æ—Ç –º–∞–∫—Å–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
        "permission_denied": "‚óæ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø—ã –≤ –µ—ë –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
    }

    _PREFIXES = {
        "staff": "üìù –ù–ê–†–£–®–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ê",
        "bug": "‚ö†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
        "agent": "‚úâÔ∏è –°–í–Ø–ó–¨ –° –û–ü–ï–†–ê–¢–û–†–û–ú",
        "broadcast": "üì¢ –û–ë–©–ï–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï",
        "ban": "üîí –ù–ê–õ–û–ñ–ï–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò",
        "unban": "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê",
        "add_agent": "üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê",
        "remove_agent": "üóë –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê"
    }

    _ERROR_MSGS = {
        917: "‚ñ∏ –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.",
        912: "‚ñ∏ –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
        27: "‚ñ∏ –ú–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
        901: "‚ñ∏ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
        100: "‚ñ∏ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
        15: "‚ñ∏ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø—ã."
    }

    def __init__(self, vk_token, admin_chat_id, group_id):
        self.vk_token = vk_token
        self.admin_chat_id = admin_chat_id
        self.group_id = group_id
        self.vk_session = self._init_vk_session()
        self.vk = VkApiWrapper(self.vk_session.get_api())
        self.upload = vk_api.VkUpload(self.vk_session)
        self._validate_tokens()
        self.longpoll = VkLongPoll(self.vk_session)
        self.rules = self._load_file('candyxpe_rules.txt', "–ü—Ä–∞–≤–∏–ª–∞ CandyxPE –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", text=True)
        self.user_contexts = {}
        self.user_ai_mode = set()
        self.user_action_mode = {}
        self.user_human_mode = set()
        self.banned_users = {}
        self.agents = self._load_file('candyxpe_agents.json', {})
        self._user_cache = {}
        self.stats = {"messages_processed": 0, "users": set()}
        self.spam_protection = {}
        self.system_prompt = (
            "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ CandyxPE. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–π–º–ø–ª–µ–π, –±–∞–≥–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞ CandyxPE –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∏—Ö:\n{rules}\n\n"
            "–¢–≤–æ–π —Ç–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ç–æ—á–Ω–æ, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –ø—É–Ω–∫—Ç–µ 3.1, –Ω–∞–π–¥–∏ –∏ –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –µ–≥–æ –∏–∑ –ø—Ä–∞–≤–∏–ª. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∫–∞–∂–∏, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n"
            "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–¥, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–∑–ª–æ–º—É –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å CandyxPE. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –æ—Ç–≤–µ—á–∞–π: '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É.'\n"
            "–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:\n- –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –±–∞–≥–µ: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–∫–ª—é—á–∞—è –≤–∞—à ID –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.'\n- –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∞–≤–∏–ª–µ: '–ü—É–Ω–∫—Ç 3.1 –≥–ª–∞—Å–∏—Ç: [—Ü–∏—Ç–∞—Ç–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª].'\n"
            "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —á—ë—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö CandyxPE."
        )

    def _init_vk_session(self):
        try:
            session = vk_api.VkApi(token=self.vk_token)
            return session
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK —Å–µ—Å—Å–∏–∏: {e}", extra={'user_id': 'N/A'})
            raise

    def _validate_tokens(self):
        try:
            self.vk_session.get_api().users.get(user_ids=1)
        except Exception as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}", extra={'user_id': 'N/A'})
            raise

    def _load_file(self, path, default, text=False):
        if not os.path.exists(path):
            self._save_file(path, default)
        try:
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read().strip() if text else json.load(f)
                if text and not content:
                    return default
                if text and len(content) > 1000000:
                    logger.warning("–ü—Ä–∞–≤–∏–ª–∞ —É–∫–æ—Ä–æ—á–µ–Ω—ã", extra={'user_id': 'N/A'})
                    return content[:1000] + "..."
                return content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}", extra={'user_id': 'N/A'})
            return default

    def _save_file(self, path, data):
        try:
            with open(path, 'w', encoding='utf-8') as f:
                if isinstance(data, str):
                    f.write(data)
                else:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}", extra={'user_id': 'N/A'})

    def _handle_error(self, user_id, error, context):
        logger.error(f"{context}: {str(error)}", extra={'user_id': user_id or 'N/A'})
        if user_id and isinstance(user_id, int):
            self._send_message(user_id, "error", self._get_keyboard("main", user_id))

    @lru_cache(maxsize=1024)
    def _get_user_info(self, user_id):
        try:
            user = self.vk.call("users.get", user_ids=user_id)[0]
            return f"\nüë§ [id{user_id}|{user['first_name']} {user['last_name']}]\n‚óæ –î–∏–∞–ª–æ–≥: [vk.com/gim230630628?sel={user_id}|–ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ]\n‚ï∞‚îÄ> –ù–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}", extra={'user_id': user_id})
            return f"\nüë§ [id{user_id}|id{user_id}]\n‚óæ –î–∏–∞–ª–æ–≥: [vk.com/gim230630628?sel={user_id}|–ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ]\n‚ï∞‚îÄ> –ù–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."

    def is_agent(self, user_id):
        return str(user_id) in self.agents

    def is_admin(self, user_id):
        return self.is_agent(user_id) and self.agents.get(str(user_id), {}).get("role") in ["admin", "manager"]

    def clean_message(self, message):
        return message.replace('{}', '').replace('{{', '').replace('}}', '').strip()

    @lru_cache(maxsize=32)
    def _get_keyboard(self, mode, user_id=None):
        keyboards = {
            "main": [
                [{"action": {"type": "text", "payload": {"command": "ai_agent"}, "label": "ü§ñ –ü–û–î–î–ï–†–ñ–ö–ê –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê"}, "color": "primary"}],
                [{"action": {"type": "text", "payload": {"command": "contact_agent"}, "label": "üßë‚Äçüíº –°–í–Ø–ó–¨ –° –û–ü–ï–†–ê–¢–û–†–û–ú"}, "color": "secondary"}],
                [{"action": {"type": "text", "payload": {"command": "report_staff"}, "label": "üìã –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "report_bug"}, "label": "‚ÑπÔ∏è –í–û–ó–ù–ò–ö–õ–ê –ù–ï–ü–û–õ–ê–î–ö–ê"}, "color": "secondary"}]
            ],
            "ai": [[{"action": {"type": "text", "payload": {"command": "end_ai"}, "label": "üîÑ –ó–ê–í–ï–†–®–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£"}, "color": "negative"}]],
            "human": [[{"action": {"type": "text", "payload": {"command": "end_human"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "negative"}]],
            "action": [[{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –û–ü–ï–†–ê–¶–ò–Æ"}, "color": "negative"}]],
            "admin": [
                [{"action": {"type": "text", "payload": {"command": "manage_agents"}, "label": "üßë‚Äçüè´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–¢–ê–¢–û–ú"}, "color": "primary"}],
                [{"action": {"type": "text", "payload": {"command": "ban_user"}, "label": "‚õè –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "broadcast"}, "label": "üì¢ –ú–ê–°–°–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "negative"}]
            ],
            "manage_agents": [
                [{"action": {"type": "text", "payload": {"command": "add_agent"}, "label": "üë• –î–û–ë–ê–í–ò–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–ê"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "remove_agent"}, "label": "üóë –£–î–ê–õ–ò–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–ê"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "secondary"}]
            ],
            "ban_user": [
                [{"action": {"type": "text", "payload": {"command": "ban"}, "label": "üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "unban"}, "label": "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "secondary"}]
            ]
        }
        buttons = keyboards.get(mode, keyboards["main"])
        if user_id and mode == "main" and self.is_agent(user_id):
            buttons.insert(0, [{"action": {"type": "text", "payload": {"command": "admin_panel"}, "label": "üõ† –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø"}, "color": "positive"}])
        return {"one_time": False, "buttons": buttons}

    def _send_to_admin(self, user_id, message, action, attachments=None):
        try:
            response = self.vk.call("messages.getConversationsById", peer_ids=2000000000 + self.admin_chat_id)
            if not response.get('items'):
                return False
        except vk_api.exceptions.ApiError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É (–∫–æ–¥: {e.code})", extra={'user_id': user_id})
            return False
        prefix = self._PREFIXES.get(action, "‚óæ –ü–†–ò–®–õ–û –°–û–û–ë–©–ï–ù–ò–ï!")
        cleaned_message = self.clean_message(message)
        params = {
            "chat_id": self.admin_chat_id,
            "message": f"{prefix}{self._get_user_info(user_id)}\n\n{cleaned_message}",
            "random_id": get_random_id()
        }
        if attachments:
            params["attachment"] = attachments
        try:
            self.vk.call("messages.send", **params)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–∏–ø: {action}): {cleaned_message[:50]}...", extra={'user_id': user_id})
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}", extra={'user_id': user_id})
            return False

    def _send_broadcast(self, user_id, message):
        if not self.is_admin(user_id):
            return False
        cleaned_message = self.clean_message(message)
        sent_count = 0
        failed = []
        for uid in self.agents:
            if int(uid) not in self.banned_users:
                try:
                    self._send_message(int(uid), f"üì¢ –ú–ê–°–°–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï:\n{cleaned_message}", self._get_keyboard("main", int(uid)))
                    sent_count += 1
                except vk_api.exceptions.ApiError as e:
                    if e.code != 901:
                        failed.append(uid)
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}", extra={'user_id': user_id})
                except Exception as e:
                    failed.append(uid)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}", extra={'user_id': user_id})
        if failed:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {', '.join(failed)}", extra={'user_id': user_id})
        self._send_to_admin(user_id, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", "broadcast")
        return True

    def _send_message(self, user_id, message_key, keyboard=None, info=None):
        if not isinstance(user_id, int):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id: {user_id}", extra={'user_id': 'N/A'})
            return
        msg = self._MESSAGES.get(message_key, message_key)
        if info:
            try:
                msg = msg.format(**info)
            except KeyError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})
                msg = message_key
        cleaned_message = self.clean_message(msg)
        if len(cleaned_message) > 4096:
            cleaned_message = self._MESSAGES["message_too_long"]
        params = {
            'user_id': user_id,
            'message': cleaned_message,
            'random_id': get_random_id()
        }
        if keyboard:
            try:
                params['keyboard'] = json.dumps(keyboard, ensure_ascii=False)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}", extra={'user_id': user_id})
        if info and info.get('attachment'):
            params['attachment'] = info['attachment']
        try:
            if self._check_user_permission(user_id):
                self.vk.call("messages.send", **params)
            else:
                params['message'] = self._MESSAGES["permission_denied"]
                self.vk.call("messages.send", **params)
        except vk_api.exceptions.ApiError as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})
            if e.code in (15, 901):
                params['message'] = self._MESSAGES["permission_denied"]
                self.vk.call("messages.send", **params)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})

    def _check_user_permission(self, user_id):
        try:
            response = self.vk.call("messages.isMessagesFromGroupAllowed", user_id=user_id, group_id=self.group_id)
            return response.get('is_allowed', False)
        except vk_api.exceptions.ApiError as e:
            if e.code in (901, 15):
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø—ã (–∫–æ–¥: {e.code})", extra={'user_id': user_id})
                return False
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}", extra={'user_id': user_id})
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}", extra={'user_id': user_id})
            return False

    def _get_ai_response(self, user_id, message):
        try:
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            self.user_contexts[user_id].append({"role": "user", "content": message})
            self.user_contexts[user_id] = self.user_contexts[user_id][-5:]
            prompt = self.system_prompt.format(rules=self.rules)
            messages = [
                {"role": "system", "content": prompt},
                {"role": "system", "content": f"–ü—Ä–∞–≤–∏–ª–∞ CandyxPE:\n{self.rules}"}
            ] + self.user_contexts[user_id]
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                max_tokens=5000,
                temperature=0.7,
                timeout=20
            )
            if isinstance(response, str) and response.strip():
                cleaned_response = self.clean_message(response)
                self.user_contexts[user_id].append({"role": "assistant", "content": cleaned_response})
                if len(cleaned_response) > 4096:
                    cleaned_response = cleaned_response[:4090] + "..."
                return cleaned_response
            return self._MESSAGES["error"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}", extra={'user_id': user_id})
            return f"‚óæ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–æ–¥–¥–µ—Ä–∂–∫–∏."

    def _handle_report(self, user_id, action, text, attachments=None):
        success_key = f"report_{action}_sent"
        failure_key = f"report_{action}_failed"
        cleaned_text = self.clean_message(text)
        if self._send_to_admin(user_id, cleaned_text, action, attachments):
            self._send_message(user_id, success_key, self._get_keyboard("main", user_id))
        else:
            self._send_message(user_id, failure_key, self._get_keyboard("main", user_id))
        self.user_action_mode.pop(user_id, None)

    def _handle_broadcast(self, user_id, message):
        if self._send_broadcast(user_id, message):
            self._send_message(user_id, "broadcast_sent", self._get_keyboard("admin", user_id))
        else:
            self._send_message(user_id, "broadcast_failed", self._get_keyboard("admin", user_id))
        self.user_action_mode.pop(user_id, None)

    def _handle_add_agent(self, user_id, text):
        try:
            parts = text.split()
            if len(parts) != 2 or parts[1] not in ["agent", "admin", "manager"]:
                raise ValueError
            agent_id, role = int(parts[0]), parts[1]
            if agent_id == user_id:
                self._send_message(user_id, "self_agent", self._get_keyboard("manage_agents", user_id))
            elif str(agent_id) in self.agents:
                self._send_message(user_id, "already_agent", self._get_keyboard("manage_agents", user_id), {"agent_id": agent_id})
            else:
                self.agents[str(agent_id)] = {"role": role}
                self._save_file('candyxpe_agents.json', self.agents)
                self._send_message(user_id, "agent_added", self._get_keyboard("admin", user_id), {"role": role.capitalize(), "agent_id": agent_id})
                self._send_to_admin(user_id, f"{role.capitalize()} @id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.", "add_agent")
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_format", self._get_keyboard("action", user_id), {"text": "<ID> <agent/admin/manager>", "example": "123456 agent"})

    def _handle_remove_agent(self, user_id, text):
        try:
            agent_id = int(text)
            if agent_id == user_id:
                self._send_message(user_id, "self_remove", self._get_keyboard("manage_agents", user_id))
            elif str(agent_id) in self.agents:
                role = self.agents[str(agent_id)]["role"]
                del self.agents[str(agent_id)]
                self._save_file('candyxpe_agents.json', self.agents)
                self._send_message(user_id, "agent_removed", self._get_keyboard("admin", user_id), {"role": role.capitalize(), "agent_id": agent_id})
                self._send_to_admin(user_id, f"{role.capitalize()} @id{agent_id} —Å–Ω—è—Ç.", "remove_agent")
            else:
                self._send_message(user_id, "not_agent", self._get_keyboard("manage_agents", user_id), {"agent_id": agent_id})
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_id", self._get_keyboard("action", user_id))

    def _handle_get_agents(self, user_id):
        if not self.is_admin(user_id) or self.agents.get(str(user_id), {}).get("role") != "manager":
            self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))
            return
        agents_list = "\n".join([f"@{agent_id} - {role['role'].capitalize()}" for agent_id, role in self.agents.items()])
        self._send_message(user_id, "get_agents", self._get_keyboard("manage_agents", user_id), {"agents_list": agents_list or "–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤."})

    def _handle_stats(self, user_id):
        if not self.is_admin(user_id):
            self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))
            return
        stats_info = {
            "users": len(self.stats["users"]),
            "sessions": len(self.user_ai_mode | self.user_human_mode),
            "bans": len(self.banned_users)
        }
        self._send_message(user_id, "stats", self._get_keyboard("admin", user_id), stats_info)

    def _handle_version(self, user_id):
        self._send_message(user_id, "version", self._get_keyboard("main", user_id), {"version": VERSION, "code_name": CODE_NAME})

    def _handle_ban(self, user_id, text):
        try:
            parts = text.split()
            if len(parts) != 2:
                raise ValueError
            target_id, hours = map(int, parts)
            if target_id == user_id:
                self._send_message(user_id, "self_ban", self._get_keyboard("ban_user", user_id))
            elif self.is_agent(target_id):
                self._send_message(user_id, "agent_ban", self._get_keyboard("ban_user", user_id))
            else:
                self.banned_users[target_id] = datetime.now() + timedelta(hours=hours)
                self._send_message(user_id, "banned", self._get_keyboard("ban_user", user_id), {"target_id": target_id, "hours": hours})
                self._send_message(target_id, "banned_notify", self._get_keyboard("main", target_id), {"hours": hours})
                self._send_to_admin(user_id, f"id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.", "ban")
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_format", self._get_keyboard("action", user_id), {"text": "<ID> <hours>", "example": "123456 24"})

    def _handle_unban(self, user_id, text):
        try:
            target_id = int(text)
            if target_id in self.banned_users:
                del self.banned_users[target_id]
                self._send_message(user_id, "unbanned", self._get_keyboard("ban_user", user_id), {"target_id": target_id})
                self._send_message(target_id, "unbanned_notify", self._get_keyboard("main", target_id))
                self._send_to_admin(user_id, f"id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", "unban")
            else:
                self._send_message(user_id, "not_banned", self._get_keyboard("ban_user", user_id), {"target_id": target_id})
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_id", self._get_keyboard("action", user_id))

    def _process_action(self, user_id, action, text, attachments=None):
        actions = {
            "staff": self._handle_report,
            "bug": self._handle_report,
            "broadcast": self._handle_broadcast,
            "ban": self._handle_ban,
            "unban": self._handle_unban,
            "add_agent": self._handle_add_agent,
            "remove_agent": self._handle_remove_agent
        }
        handler = actions.get(action)
        if handler:
            if action in ["staff", "bug"]:
                handler(user_id, action, text, attachments)
            else:
                handler(user_id, text)

    def _handle_command(self, user_id, cmd):
        def ai_agent():
            self.user_ai_mode.add(user_id)
            self.user_human_mode.discard(user_id)
            self._send_message(user_id, "ai_on", self._get_keyboard("ai", user_id))

        def contact_agent():
            self.user_human_mode.add(user_id)
            self.user_ai_mode.discard(user_id)
            self._send_to_admin(user_id, "‚ú± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.", "agent")
            self._send_message(user_id, "human_on", self._get_keyboard("human", user_id))

        def end_human():
            self.user_human_mode.discard(user_id)
            self._send_message(user_id, "human_off", self._get_keyboard("main", user_id))

        def report_staff():
            self.user_action_mode[user_id] = "staff"
            self.user_human_mode.discard(user_id)
            self._send_message(user_id, "report_staff", self._get_keyboard("action", user_id))

        def report_bug():
            self.user_action_mode[user_id] = "bug"
            self._send_message(user_id, "report_bug", self._get_keyboard("action", user_id))

        def end_ai():
            self.user_ai_mode.discard(user_id)
            self.user_action_mode.pop(user_id, None)
            self.user_contexts.pop(user_id, None)
            self.user_human_mode.discard(user_id)
            self._send_message(user_id, "ai_off", self._get_keyboard("main", user_id))

        def cancel():
            self.user_action_mode.pop(user_id, None)
            self.user_ai_mode.discard(user_id)
            self.user_human_mode.discard(user_id)
            self._send_message(user_id, "cancel", self._get_keyboard("main", user_id))

        def admin_panel():
            if self.is_agent(user_id):
                self._send_message(user_id, "admin_panel", self._get_keyboard("admin", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("main", user_id))

        def manage_agents():
            if self.is_admin(user_id):
                self._send_message(user_id, "manage_agents", self._get_keyboard("manage_agents", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def ban_user():
            if self.is_admin(user_id):
                self._send_message(user_id, "ban_user", self._get_keyboard("ban_user", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def broadcast():
            if self.is_admin(user_id):
                self.user_action_mode[user_id] = "broadcast"
                self._send_message(user_id, "broadcast", self._get_keyboard("action", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def add_agent():
            if self.is_admin(user_id):
                self.user_action_mode[user_id] = "add_agent"
                self._send_message(user_id, "add_agent", self._get_keyboard("action", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def remove_agent():
            if self.is_admin(user_id):
                self.user_action_mode[user_id] = "remove_agent"
                self._send_message(user_id, "remove_agent", self._get_keyboard("action", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def ban():
            if self.is_admin(user_id):
                self.user_action_mode[user_id] = "ban"
                self._send_message(user_id, "ban", self._get_keyboard("action", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def unban():
            if self.is_admin(user_id):
                self.user_action_mode[user_id] = "unban"
                self._send_message(user_id, "unban", self._get_keyboard("action", user_id))
            else:
                self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))

        def getagents():
            self._handle_get_agents(user_id)

        def stats():
            self._handle_stats(user_id)

        def version():
            self._handle_version(user_id)

        def unknown():
            self._send_message(user_id, "unknown", self._get_keyboard("main", user_id))

        commands = {
            "ai_agent": ai_agent,
            "contact_agent": contact_agent,
            "end_human": end_human,
            "report_staff": report_staff,
            "report_bug": report_bug,
            "end_ai": end_ai,
            "cancel": cancel,
            "admin_panel": admin_panel,
            "manage_agents": manage_agents,
            "ban_user": ban_user,
            "broadcast": broadcast,
            "add_agent": add_agent,
            "remove_agent": remove_agent,
            "ban": ban,
            "unban": unban,
            "getagents": getagents,
            "stats": stats,
            "version": version
        }
        commands.get(cmd.lower(), unknown)()

    def _check_spam(self, user_id):
        current_time = time.time()
        if user_id not in self.spam_protection:
            self.spam_protection[user_id] = []
        self.spam_protection[user_id] = [t for t in self.spam_protection[user_id] if current_time - t < 60]
        if len(self.spam_protection[user_id]) >= 5:
            return False
        self.spam_protection[user_id].append(current_time)
        return True

    def _process_message(self, event):
        if event.type != VkEventType.MESSAGE_NEW or event.from_chat or not event.to_me:
            return
        user_id = event.user_id
        text = event.text.strip() if event.text else ""
        start_time = time.time()
        try:
            self.banned_users = {uid: expiry for uid, expiry in self.banned_users.items() if datetime.now() <= expiry}
            if user_id in self.banned_users:
                self._send_message(user_id, "banned_user", self._get_keyboard("main", user_id))
                return
            if not self._check_spam(user_id):
                self._send_message(user_id, "error", self._get_keyboard("main", user_id))
                return
            self.stats["users"].add(user_id)
            self.stats["messages_processed"] += 1
            if text.startswith('/'):
                cmd = text[1:]
                self._handle_command(user_id, cmd)
                return
            if hasattr(event, 'payload') and event.payload:
                try:
                    payload = json.loads(event.payload.replace('\\"', '"'))
                    if isinstance(payload, dict) and "command" in payload:
                        self._handle_command(user_id, payload["command"])
                        return
                except json.JSONDecodeError as e:
                    self._handle_error(user_id, e, "–ù–µ–≤–µ—Ä–Ω—ã–π payload")
            if not text:
                self._send_message(user_id, "no_input", self._get_keyboard("main", user_id))
                return
            if user_id in self.user_human_mode:
                attachments = []
                if event.attachments:
                    for att in event.attachments:
                        att_type = att.get('type')
                        if att_type in ['photo', 'video', 'doc']:
                            owner_id = att[att_type].get('owner_id')
                            att_id = att[att_type].get('id')
                            if owner_id and att_id:
                                attachments.append(f"{att_type}{owner_id}_{att_id}")
                cleaned_text = self.clean_message(text)
                self._send_to_admin(user_id, cleaned_text, "agent", ",".join(attachments) if attachments else None)
                return
            if user_id in self.user_action_mode:
                attachments = []
                if event.attachments:
                    for att in event.attachments:
                        att_type = att.get('type')
                        if att_type in ['photo', 'video', 'doc']:
                            owner_id = att[att_type].get('owner_id')
                            att_id = att[att_type].get('id')
                            if owner_id and att_id:
                                attachments.append(f"{att_type}{owner_id}_{att_id}")
                cleaned_text = self.clean_message(text)
                self._process_action(user_id, self.user_action_mode[user_id], cleaned_text, ",".join(attachments) if attachments else None)
                return
            if user_id in self.user_ai_mode:
                if text.lower() in {"–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø"}:
                    self._handle_command(user_id, "end_ai")
                else:
                    cleaned_text = self.clean_message(text)
                    ai_response = self._get_ai_response(user_id, cleaned_text)
                    self._send_message(user_id, ai_response, self._get_keyboard("ai", user_id))
                return
            if text.lower() in {"–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–æ–¥–≤–µ—Ç"}:
                self._send_message(user_id, "welcome", self._get_keyboard("main", user_id))
            else:
                self._send_message(user_id, "unknown", self._get_keyboard("main", user_id))
        except Exception as e:
            self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        finally:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫", extra={'user_id': user_id})

    def run(self):
        print(f"\nüöñ CandyxPE v{VERSION} {CODE_NAME}\n{'-'*40}")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ CandyxPE by vatkovskydev –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º dsuslov67\n{'-'*40}\n")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", extra={'user_id': 'N/A'})
        while True:
            try:
                for event in self.longpoll.listen():
                    self._process_message(event)
            except Exception as e:
                self._handle_error(None, e, '–û—à–∏–±–∫–∞ –≤ LongPoll')
                time.sleep(5)

if __name__ == "__main__":
    VK_TOKEN = "vk1.a.BfB4WDbOxfqsQLqcONRk3lrcEmTW9BmnMYiU8xLbZKjRUkGDUkdmpvNi2nFMCAzX_lOwYqHBM2VubFepkpraAuBJ50JWXIX0mWfwPbBMbtGbKrOhhZYROaAlkGeqA1L-8Z-aa35kp00rRGjOooH87hoEZmWGxPBhBEg7Q4SC-1S-CoCR2hZp9QEZS7-i8TrfyucOUrFApTJE5N4hhTOG7Q"
    ADMIN_CHAT_ID = 2
    GROUP_ID = 230630628
    bot = CandyxPEBot(VK_TOKEN, ADMIN_CHAT_ID, GROUP_ID)
    bot.run()
