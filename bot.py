import json
import logging
import time
from datetime import datetime, timedelta
import os
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
import g4f

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SupportBot:
    VERSION = "0.4.0-RELEASE"
    CODE_NAME = "NOVA"

    MESSAGES = {
        "welcome": "üòò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n‚ï∞‚îÄ> –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ.",
        "unknown": "‚ñ∏ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.",
        "ai_on": "ü§ñ –ò–ò –∑–∞–ø—É—â–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.",
        "human_on": "üì£ –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        "human_off": "‚ñ∏ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é!",
        "report_staff": "‚¶ø –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª.\n\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ.",
        "report_bug": "‚¶ø –°–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–¥–æ—á–µ—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
        "ai_off": "‚ú± –ò–ò –æ—Ç–∫–ª—é—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
        "cancel": "‚ñ∏ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "admin_denied": "‚ï∞‚îÄ> –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
        "admin_panel": "‚ñ™Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        "manage_agents": "‚óæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        "ban_user": "‚¶ø –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏.\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [vk.com/topic-230626581_54557249|–ø—Ä–∞–≤–∏–ª–∞–º–∏].",
        "broadcast": "‚óæ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        "add_agent": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ ID –∏ —Ä–æ–ª—å: '123456789 agent/admin/manager'.",
        "remove_agent": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏.",
        "ban": "‚óæ –£–∫–∞–∂–∏—Ç–µ ID –∏ —á–∞—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: '123456789 24'.",
        "unban": "‚ú± –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
        "no_input": "‚ñ∏ –í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ.",
        "report_staff_sent": "‚ñ∏ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        "report_bug_sent": "‚ñ∏ –ù–µ–¥–æ—á–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –°–ø–∞—Å–∏–±–æ!",
        "report_staff_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.",
        "report_bug_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–¥–æ—á–µ—Ç–∞.",
        "broadcast_sent": "‚¶ø –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
        "broadcast_failed": "‚ñ∏ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
        "self_agent": "‚óæ –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è.",
        "already_agent": "‚ï∞‚îÄ> @id{agent_id} —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
        "agent_added": "‚ï∞‚îÄ> {role} @id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.",
        "self_remove": "‚ñ∏ –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–æ–ª—å —Å —Å–µ–±—è.",
        "agent_removed": "‚ï∞‚îÄ> @id{agent_id} —Å–Ω—è—Ç —Å —Ä–æ–ª–∏ {role}.",
        "not_agent": "‚¶ø @id{agent_id} –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.",
        "invalid_format": "‚ñ∏ –§–æ—Ä–º–∞—Ç: {text}. –ü—Ä–∏–º–µ—Ä: '{example}'.",
        "invalid_id": "‚ñ∏ –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
        "self_ban": "‚ï∞‚îÄ> –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.",
        "agent_ban": "‚ï∞‚îÄ> –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
        "banned": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê:\n‚ï∞‚îÄ> @id{target_id}\n‚ï∞‚îÄ> –°—Ä–æ–∫: {hours} —á.",
        "banned_notify": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê:\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: [vk.com/topic-230626581_54606105|–Ω–∞—Ä—É—à–µ–Ω–∏–µ].\n‚ï∞‚îÄ> –°—Ä–æ–∫: {hours} —á.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [vk.com/id763589554|–°–ï–û] –∏–ª–∏ [vk.com/id1044729621|–°–û–û].",
        "unbanned": "‚óæ @id{target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "unbanned_notify": "‚ñ∏ –ë–õ–û–ö–ò–†–û–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê:\n‚ï∞‚îÄ> –ü—Ä–∏—á–∏–Ω–∞: —Ä–µ—à–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.",
        "not_banned": "‚ñ∏ @id{target_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        "banned_user": "‚ñ∏ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
        "chat_unavailable": "‚¶ø –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [vk.com/id1044729621|–°–û–û].",
        "error": "‚óæ –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "get_agents": "‚ñ∏ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n{agents_list}",
        "version": "‚¶ø –í–µ—Ä—Å–∏—è: {version} ({code_name})",
        "stats": "‚ñ∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–°–µ—Å—Å–∏–π: {sessions}\n–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {bans}",
        "message_too_long": "‚óæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 4096).",
        "permission_denied": "‚óæ –†–∞–∑—Ä–µ—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø—ã."
    }

    PREFIXES = {
        "staff": "üìù –ù–ê–†–£–®–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ê",
        "bug": "‚ö†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê",
        "agent": "‚úâÔ∏è –°–í–Ø–ó–¨ –° –û–ü–ï–†–ê–¢–û–†–û–ú",
        "broadcast": "üì¢ –û–ë–©–ï–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï",
        "ban": "üîí –ù–ê–õ–û–ñ–ï–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ò",
        "unban": "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê",
        "add_agent": "üë• –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê",
        "remove_agent": "üóë –£–î–ê–õ–ï–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê"
    }

    def __init__(self, token, admin_chat, group):
        self.token = token
        self.admin_chat = admin_chat
        self.group = group
        self.vk = vk_api.VkApi(token=token).get_api()
        self.longpoll = VkLongPoll(vk_api.VkApi(token=token))
        self.upload = vk_api.VkUpload(vk_api.VkApi(token=token))
        self.rules = self.load_file('candyxpe_rules.txt', "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", text=True)
        self.agents = self.load_file('candyxpe_agents.json', {})
        self.banned = {}
        self.ai_users = set()
        self.human_users = set()
        self.actions = {}
        self.contexts = {}
        self.stats = {"users": set(), "messages": 0}
        self.spam = {}
        self.prompt = (
            "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ —Ç–µ–º–∞–º –ø—Ä–æ–µ–∫—Ç–∞: —Ç–µ—Ö–≤–æ–ø—Ä–æ—Å—ã, –≥–µ–π–º–ø–ª–µ–π, –±–∞–≥–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞:\n{rules}\n\n"
            "–¢–æ–Ω: –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –ø—É–Ω–∫—Ç—ã –ø—Ä–∞–≤–∏–ª, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å. "
            "–ù–µ –¥–∞–≤–∞–π –∫–æ–¥ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–Ω–µ CandyxPE. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω, –æ—Ç–≤–µ—Ç—å: '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É.'\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n- –ë–∞–≥: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —É–∫–∞–∂–∏—Ç–µ ID.'\n- –ü—Ä–∞–≤–∏–ª–∞: '–ü—É–Ω–∫—Ç 3.1: [—Ü–∏—Ç–∞—Ç–∞].'"
        )
        self.msg_allowed_cache = {}

    def load_file(self, path, default, text=False):
        if not os.path.exists(path):
            self.save_file(path, default)
        with open(path, 'r', encoding='utf-8') as f:
            return f.read().strip() if text else json.load(f)

    def save_file(self, path, data):
        with open(path, 'w', encoding='utf-8') as f:
            if isinstance(data, str):
                f.write(data)
            else:
                json.dump(data, f, ensure_ascii=False, indent=2)

    def send_message(self, user, key, keyboard=None, info=None, retry=False):
        logger.debug(f"send_message called with user={user}, key={key}, retry={retry}")
        try:
            if user not in self.msg_allowed_cache or time.time() - self.msg_allowed_cache[user][1] > 3600:
                try:
                    allowed = self.vk.messages.isMessagesFromGroupAllowed(user_id=user, group_id=self.group).get('is_allowed', False)
                    self.msg_allowed_cache[user] = (allowed, time.time())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ isMessagesFromGroupAllowed –¥–ª—è {user}: {e}")
                    allowed = False
            else:
                allowed = self.msg_allowed_cache[user][0]

            if not allowed and not retry:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user} –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
                try:
                    self.vk.messages.send(
                        user_id=user,
                        message=self.MESSAGES["permission_denied"],
                        random_id=get_random_id(),
                        keyboard=json.dumps(self.get_keyboard("main", user), ensure_ascii=False)
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ permission_denied –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å permission_denied –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
                return

            msg = self.MESSAGES.get(key, key)
            if info:
                try:
                    msg = msg.format(**info)
                except KeyError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user}, –∫–ª—é—á: {key}, info: {info}, –æ—à–∏–±–∫–∞: {e}")
                    msg = self.MESSAGES["error"]

            params = {'user_id': user, 'message': msg, 'random_id': get_random_id()}
            if keyboard:
                try:
                    params['keyboard'] = json.dumps(keyboard, ensure_ascii=False)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è {user}: {e}")
                    params['keyboard'] = json.dumps(self.get_keyboard("main", user), ensure_ascii=False)

            if info and info.get('attachment'):
                params['attachment'] = info['attachment']

            self.vk.messages.send(**params)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {msg[:50]}")
        except vk_api.exceptions.ApiError as e:
            logger.error(f"VK API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e} (–∫–æ–¥: {getattr(e, 'code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')})")
            if not retry:
                try:
                    self.vk.messages.send(
                        user_id=user,
                        message=self.MESSAGES["error"],
                        random_id=get_random_id(),
                        keyboard=json.dumps(self.get_keyboard("main", user), ensure_ascii=False)
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ send_message –¥–ª—è {user}, –∫–ª—é—á: {key}: {e}")
            if not retry:
                try:
                    self.vk.messages.send(
                        user_id=user,
                        message=self.MESSAGES["error"],
                        random_id=get_random_id(),
                        keyboard=json.dumps(self.get_keyboard("main", user), ensure_ascii=False)
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

    def get_keyboard(self, mode, user=None):
        keyboards = {
            "main": [
                [{"action": {"type": "text", "payload": {"command": "ai_agent"}, "label": "ü§ñ –ü–û–î–î–ï–†–ñ–ö–ê –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê"}, "color": "primary"}],
                [{"action": {"type": "text", "payload": {"command": "contact_agent"}, "label": "üßë‚Äçüíº –°–í–Ø–ó–¨ –° –û–ü–ï–†–ê–¢–û–†–û–ú"}, "color": "secondary"}],
                [{"action": {"type": "text", "payload": {"command": "report_staff"}, "label": "üìã –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "report_bug"}, "label": "‚ÑπÔ∏è –í–û–ó–ù–ò–ö–õ–ê –ù–ï–ü–û–õ–ê–î–ö–ê"}, "color": "secondary"}]
            ],
            "ai": [[{"action": {"type": "text", "payload": {"command": "end_ai"}, "label": "üîÑ –ó–ê–í–ï–†–®–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£"}, "color": "negative"}]],
            "human": [[{"action": {"type": "text", "payload": {"command": "end_human"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "negative"}]],
            "action": [[{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –û–ü–ï–†–ê–¶–ò–Æ"}, "color": "negative"}]],
            "admin": [
                [{"action": {"type": "text", "payload": {"command": "manage_agents"}, "label": "üßë‚Äçüè´ –£–ü–†–ê–í–õ–ï–ù–ò–ï –®–¢–ê–¢–û–ú"}, "color": "primary"}],
                [{"action": {"type": "text", "payload": {"command": "ban_user"}, "label": "‚õè –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "broadcast"}, "label": "üì¢ –ú–ê–°–°–û–í–û–ï –û–ü–û–í–ï–©–ï–ù–ò–ï"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "negative"}]
            ],
            "manage_agents": [
                [{"action": {"type": "text", "payload": {"command": "add_agent"}, "label": "üë• –î–û–ë–ê–í–ò–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–ê"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "remove_agent"}, "label": "üóë –£–î–ê–õ–ò–¢–¨ –°–û–¢–†–£–î–ù–ò–ö–ê"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "secondary"}]
            ],
            "ban_user": [
                [{"action": {"type": "text", "payload": {"command": "ban"}, "label": "üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü"}, "color": "negative"}],
                [{"action": {"type": "text", "payload": {"command": "unban"}, "label": "üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–£–ü–ê"}, "color": "positive"}],
                [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîÑ –í–ï–†–ù–£–¢–¨–°–Ø –ù–ê–ó–ê–î"}, "color": "secondary"}]
            ]
        }
        buttons = keyboards.get(mode, keyboards["main"])
        if user and mode == "main" and str(user) in self.agents:
            buttons.insert(0, [{"action": {"type": "text", "payload": {"command": "admin_panel"}, "label": "üõ† –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø"}, "color": "positive"}])
        return {"one_time": False, "buttons": buttons}

    def send_admin(self, user, message, action, attachments=None):
        prefix = self.PREFIXES.get(action, "‚óæ –°–û–û–ë–©–ï–ù–ò–ï")
        try:
            user_info = self.vk.users.get(user_ids=user)[0]
            info = f"\nüë§ [id{user}|{user_info['first_name']} {user_info['last_name']}]\n‚óæ –î–∏–∞–ª–æ–≥: [vk.com/gim230630628?sel={user}|–ø–µ—Ä–µ–π—Ç–∏]\n‚ï∞‚îÄ> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
        except Exception:
            info = f"\nüë§ [id{user}|id{user}]\n‚óæ –î–∏–∞–ª–æ–≥: [vk.com/gim230630628?sel={user}|–ø–µ—Ä–µ–π—Ç–∏]\n‚ï∞‚îÄ> –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
        params = {
            "chat_id": self.admin_chat,
            "message": f"{prefix}{info}\n\n{message}",
            "random_id": get_random_id()
        }
        if attachments:
            params["attachment"] = attachments
        try:
            self.vk.messages.send(**params)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (—Ç–∏–ø: {action}): {message[:50]}...")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            self.send_message(user, "chat_unavailable")
            return False

    def get_ai_response(self, user, message):
        if user not in self.contexts:
            self.contexts[user] = []
        self.contexts[user].append({"role": "user", "content": message})
        self.contexts[user] = self.contexts[user][-5:]
        prompt = self.prompt.format(rules=self.rules)
        messages = [
            {"role": "system", "content": prompt},
            {"role": "system", "content": f"–ü—Ä–∞–≤–∏–ª–∞ CandyxPE:\n{self.rules}"}
        ] + self.contexts[user]
        try:
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                max_tokens=500,
                temperature=0.7,
                timeout=10
            )
            if isinstance(response, str) and response.strip():
                cleaned_response = response.replace('*', '')
                self.contexts[user].append({"role": "assistant", "content": cleaned_response})
                return cleaned_response[:4090] + "..." if len(cleaned_response) > 4096 else cleaned_response
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return self.MESSAGES["error"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò: {e}")
            return self.MESSAGES["error"]

    def process_command(self, user, cmd):
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã {cmd} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
        def execute_command(action, success_message, keyboard_mode, condition=True):
            if condition:
                if action:
                    action()
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {success_message} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π {keyboard_mode}")
                self.send_message(user, success_message, self.get_keyboard(keyboard_mode, user))
            else:
                logger.debug(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {cmd} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}")
                self.send_message(user, "admin_denied", self.get_keyboard("admin", user))

        commands = {
            "ai_agent": lambda: execute_command(lambda: (self.ai_users.add(user), self.human_users.discard(user)), "ai_on", "ai", True),
            "contact_agent": lambda: execute_command(lambda: (self.human_users.add(user), self.ai_users.discard(user), self.send_admin(user, "‚ú± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", "agent")), "human_on", "human", True),
            "end_human": lambda: execute_command(lambda: (self.human_users.discard(user), self.actions.pop(user, None), self.ai_users.discard(user)), "human_off", "main", True),
            "report_staff": lambda: execute_command(lambda: (self.actions.update({user: "staff"}), self.human_users.discard(user)), "report_staff", "action", True),
            "report_bug": lambda: execute_command(lambda: self.actions.update({user: "bug"}), "report_bug", "action", True),
            "end_ai": lambda: execute_command(lambda: (self.ai_users.discard(user), self.actions.pop(user, None), self.contexts.pop(user, None), self.human_users.discard(user)), "ai_off", "main", True),
            "cancel": lambda: execute_command(lambda: (self.actions.pop(user, None), self.ai_users.discard(user), self.human_users.discard(user)), "cancel", "main", True),
            "admin_panel": lambda: execute_command(None, "admin_panel", "admin", str(user) in self.agents),
            "manage_agents": lambda: execute_command(None, "manage_agents", "manage_agents", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "ban_user": lambda: execute_command(None, "ban_user", "ban_user", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "broadcast": lambda: execute_command(lambda: self.actions.update({user: "broadcast"}), "broadcast", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "add_agent": lambda: execute_command(lambda: self.actions.update({user: "add_agent"}), "add_agent", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "remove_agent": lambda: execute_command(lambda: self.actions.update({user: "remove_agent"}), "remove_agent", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "ban": lambda: execute_command(lambda: self.actions.update({user: "ban"}), "ban", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "unban": lambda: execute_command(lambda: self.actions.update({user: "unban"}), "unban", "action", str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]),
            "getagents": lambda: execute_command(None, "get_agents", "manage_agents", str(user) in self.agents and self.agents[str(user)].get("role") == "manager", action_type="getagents"),
            "stats": lambda: execute_command(None, "stats", "admin", str(user) in self.agents, action_type="stats"),
            "version": lambda: execute_command(None, "version", "main", True, action_type="version")
        }

        if cmd.lower() == "getagents":
            if str(user) in self.agents and self.agents[str(user)].get("role") == "manager":
                agents_list = "\n".join([f"@id{k} - {v['role'].capitalize()}" for k, v in self.agents.items()]) or "–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤."
                self.send_message(user, "get_agents", self.get_keyboard("manage_agents", user), {"agents_list": agents_list})
            else:
                self.send_message(user, "admin_denied", self.get_keyboard("admin", user))
        elif cmd.lower() == "stats":
            if str(user) in self.agents:
                self.send_message(user, "stats", self.get_keyboard("admin", user), {
                    "users": len(self.stats["users"]),
                    "sessions": len(self.ai_users | self.human_users),
                    "bans": len(self.banned)
                })
            else:
                self.send_message(user, "admin_denied", self.get_keyboard("admin", user))
        elif cmd.lower() == "version":
            self.send_message(user, "version", self.get_keyboard("main", user), {"version": self.VERSION, "code_name": self.CODE_NAME})
        else:
            commands.get(cmd.lower(), lambda: self.send_message(user, "unknown", self.get_keyboard("main", user)))()

    def process_action(self, user, action, text, attachments=None):
        if action in ["staff", "bug"]:
            success = self.send_admin(user, text, action, attachments)
            self.send_message(user, f"report_{action}_sent" if success else f"report_{action}_failed", self.get_keyboard("main", user))
            self.actions.pop(user, None)
        elif action == "broadcast":
            if str(user) in self.agents and self.agents[str(user)].get("role") in ["admin", "manager"]:
                if len(text) > 4096:
                    self.send_message(user, "message_too_long", self.get_keyboard("admin", user))
                else:
                    sent_count = 0
                    for uid in self.agents:
                        if int(uid) not in self.banned:
                            self.send_message(int(uid), f"üì¢ –û–ü–û–í–ï–©–ï–ù–ò–ï:\n{text}", self.get_keyboard("main", int(uid)))
                            sent_count += 1
                    self.send_admin(user, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", "broadcast")
                    self.send_message(user, "broadcast_sent", self.get_keyboard("admin", user))
            self.actions.pop(user, None)
        elif action == "add_agent":
            try:
                agent_id, role = text.split()
                if role not in ["agent", "admin", "manager"]:
                    raise ValueError
                agent_id = int(agent_id)
                if agent_id == user:
                    self.send_message(user, "self_agent", self.get_keyboard("manage_agents", user))
                elif str(agent_id) in self.agents:
                    self.send_message(user, "already_agent", self.get_keyboard("manage_agents", user), {"agent_id": agent_id})
                else:
                    self.agents[str(agent_id)] = {"role": role}
                    self.save_file('candyxpe_agents.json', self.agents)
                    self.send_message(user, "agent_added", self.get_keyboard("admin", user), {"role": role.capitalize(), "agent_id": agent_id})
                    self.send_admin(user, f"{role.capitalize()} @id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.", "add_agent")
                self.actions.pop(user, None)
            except ValueError:
                self.send_message(user, "invalid_format", self.get_keyboard("action", user), {"text": "<ID> <agent/admin/manager>", "example": "123456 agent"})
        elif action == "remove_agent":
            try:
                agent_id = int(text)
                if agent_id == user:
                    self.send_message(user, "self_remove", self.get_keyboard("manage_agents", user))
                elif str(agent_id) in self.agents:
                    role = self.agents[str(agent_id)]["role"]
                    del self.agents[str(agent_id)]
                    self.save_file('candyxpe_agents.json', self.agents)
                    self.send_message(user, "agent_removed", self.get_keyboard("admin", user), {"role": role.capitalize(), "agent_id": agent_id})
                    self.send_admin(user, f"{role.capitalize()} @id{agent_id} —Å–Ω—è—Ç.", "remove_agent")
                else:
                    self.send_message(user, "not_agent", self.get_keyboard("manage_agents", user), {"agent_id": agent_id})
                self.actions.pop(user, None)
            except ValueError:
                self.send_message(user, "invalid_id", self.get_keyboard("action", user))
        elif action == "ban":
            try:
                target_id, hours = map(int, text.split())
                if target_id == user:
                    self.send_message(user, "self_ban", self.get_keyboard("ban_user", user))
                elif str(target_id) in self.agents:
                    self.send_message(user, "agent_ban", self.get_keyboard("ban_user", user))
                else:
                    self.banned[target_id] = datetime.now() + timedelta(hours=hours)
                    self.send_message(user, "banned", self.get_keyboard("ban_user", user), {"target_id": target_id, "hours": hours})
                    self.send_message(target_id, "banned_notify", self.get_keyboard("main", target_id), {"hours": hours})
                    self.send_admin(user, f"id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.", "ban")
                self.actions.pop(user, None)
            except ValueError:
                self.send_message(user, "invalid_format", self.get_keyboard("action", user), {"text": "<ID> <hours>", "example": "123456 24"})
        elif action == "unban":
            try:
                target_id = int(text)
                if target_id in self.banned:
                    del self.banned[target_id]
                    self.send_message(user, "unbanned", self.get_keyboard("ban_user", user), {"target_id": target_id})
                    self.send_message(target_id, "unbanned_notify", self.get_keyboard("main", target_id))
                    self.send_admin(user, f"id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", "unban")
                else:
                    self.send_message(user, "not_banned", self.get_keyboard("ban_user", user), {"target_id": target_id})
                self.actions.pop(user, None)
            except ValueError:
                self.send_message(user, "invalid_id", self.get_keyboard("action", user))

    def check_spam(self, user):
        now = time.time()
        self.spam[user] = [t for t in self.spam.get(user, []) if now - t < 60]
        if len(self.spam[user]) >= 25:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ø–∞–º)")
            return False
        self.spam[user].append(now)
        return True

    def process_message(self, event):
        if event.type != VkEventType.MESSAGE_NEW or event.from_chat or not event.to_me:
            return
        user = event.user_id
        text = event.text.strip() if event.text else ""
        logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user}, —Ç–µ–∫—Å—Ç: {text}")
        self.banned = {uid: expiry for uid, expiry in self.banned.items() if datetime.now() <= expiry}
        if user in self.banned:
            self.send_message(user, "banned_user", self.get_keyboard("main", user))
            return
        if not self.check_spam(user):
            self.send_message(user, "error", self.get_keyboard("main", user))
            return
        self.stats["users"].add(user)
        self.stats["messages"] += 1
        if text.startswith('/'):
            logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {text[1:]}")
            self.process_command(user, text[1:])
            return
        if hasattr(event, 'payload') and event.payload:
            try:
                payload = json.loads(event.payload)
                if isinstance(payload, dict) and "command" in payload:
                    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ payload: {payload}")
                    self.process_command(user, payload["command"])
                    return
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è payload –¥–ª—è {user}: {e}")
                self.send_message(user, "error", self.get_keyboard("main", user))
                return
        if not text:
            self.send_message(user, "no_input", self.get_keyboard("main", user))
            return
        if user in self.human_users:
            attachments = [f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}" for att in event.attachments if att.get('type')] if event.attachments else None
            self.send_admin(user, text, "agent", ",".join(attachments) if attachments else None)
            return
        if user in self.actions:
            attachments = [f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}" for att in event.attachments if att.get('type')] if event.attachments else None
            self.process_action(user, self.actions[user], text, ",".join(attachments) if attachments else None)
            return
        if user in self.ai_users:
            if text.lower() in {"–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø"}:
                self.process_command(user, "end_ai")
            else:
                response = self.get_ai_response(user, text)
                self.send_message(user, response, self.get_keyboard("ai", user))
            return
        if text.lower() in {"–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–æ–¥–≤–µ—Ç"}:
            self.send_message(user, "welcome", self.get_keyboard("main", user))
        else:
            self.send_message(user, "unknown", self.get_keyboard("main", user))

    def run(self):
        print(f"\nüöñ CandyxPE v{self.VERSION} {self.CODE_NAME}\n{'-'*40}")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ CandyxPE by vatkovskydev –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º dsuslov67\n{'-'*40}\n")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        while True:
            try:
                for event in self.longpoll.listen():
                    self.process_message(event)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ LongPoll: {e}")
                time.sleep(1)

if __name__ == "__main__":
    VK_TOKEN = "vk1.a.BfB4WDbOxfqsQLqcONRk3lrcEmTW9BmnMYiU8xLbZKjRUkGDUkdmpvNi2nFMCAzX_lOwYqHBM2VubFepkpraAuBJ50JWXIX0mWfwPbBMbtGbKrOhhZYROaAlkGeqA1L-8Z-aa35kp00rRGjOooH87hoEZmWGxPBhBEg7Q4SC-1S-CoCR2hZp9QEZS7-i8TrfyucOUrFApTJE5N4hhTOG7Q"
    ADMIN_CHAT_ID = 2
    GROUP_ID = 230630628
    bot = SupportBot(VK_TOKEN, ADMIN_CHAT_ID, GROUP_ID)
    bot.run()
