import json
import logging
import sys
import time
from datetime import datetime, timedelta
import os
from functools import lru_cache
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
import g4f

VERSION = "0.3.4-ALPHA"
CODE_NAME = "Testing+Fixed"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s - User: %(user_id)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class CandyxPEBot:
    _MESSAGES = {
        "ru": {
            "welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ CandyxPE!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "unknown": "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
            "ai_on": "ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã.",
            "human_on": "üë®‚Äçüíª –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∞–≥–µ–Ω—Ç—É. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.",
            "human_off": "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º –±–æ—Ç–∞.",
            "report_staff": "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:",
            "report_bug": "üêõ –°–æ–æ–±—â–∏—Ç–µ –æ –±–∞–≥–µ\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
            "lang_changed": "üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang}.",
            "ai_off": "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò.",
            "cancel": "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            "admin_denied": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            "admin_panel": "üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "manage_agents": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "ban_user": "‚õî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "broadcast": "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            "add_agent": "‚ûï –í–≤–µ–¥–∏—Ç–µ ID –∏ —Ä–æ–ª—å (agent/admin/manager, –Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 agent'):",
            "remove_agent": "‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏:",
            "ban": "‚õî –í–≤–µ–¥–∏—Ç–µ ID –∏ —á–∞—Å—ã –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 24'):",
            "unban": "‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
            "no_input": "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
            "report_staff_sent": "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
            "report_bug_sent": "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
            "report_staff_failed": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã.",
            "report_bug_failed": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–µ.",
            "broadcast_sent": "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            "broadcast_failed": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
            "self_agent": "‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è.",
            "already_agent": "‚ùå id{agent_id} —É–∂–µ –∞–≥–µ–Ω—Ç.",
            "agent_added": "‚úÖ {role} id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.",
            "agent_added_notify": "",
            "self_remove": "‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–æ–ª—å —Å —Å–µ–±—è.",
            "agent_removed": "‚úÖ {role} id{agent_id} —Å–Ω—è—Ç.",
            "agent_removed_notify": "",
            "not_agent": "‚ùå id{agent_id} –Ω–µ –∞–≥–µ–Ω—Ç.",
            "invalid_format": "‚ùå –§–æ—Ä–º–∞—Ç: {text}. –ü—Ä–∏–º–µ—Ä: '{example}'.",
            "invalid_id": "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.",
            "self_ban": "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è.",
            "agent_ban": "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞.",
            "banned": "‚õî id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.",
            "banned_notify": "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {hours} —á–∞—Å–æ–≤.",
            "unbanned": "‚úÖ id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            "unbanned_notify": "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
            "not_banned": "‚ùå id{target_id} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.",
            "banned_user": "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "chat_unavailable": "‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            "error": "‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            "get_agents": "üìã –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤:\n{agents_list}"
        },
        "en": {
            "welcome": "üëã Welcome to CandyxPE!\nChoose an action:",
            "unknown": "‚ùå Unknown command.",
            "ai_on": "ü§ñ AI Agent activated! Ask your questions.",
            "human_on": "üë®‚Äçüíª You are connected to an agent. Describe your issue.",
            "human_off": "üëã You have returned to bot mode.",
            "report_staff": "‚ö†Ô∏è Staff Complaint\nDescribe the situation:",
            "report_bug": "üêõ Report a Bug\nDescribe the issue:",
            "lang_changed": "üåê Language changed to {lang}.",
            "ai_off": "üëã You have exited AI mode.",
            "cancel": "‚úÖ Action canceled.",
            "admin_denied": "‚õî Access denied.",
            "admin_panel": "üõ† Admin Panel\nChoose an action:",
            "manage_agents": "üë• Manage Agents\nChoose an action:",
            "ban_user": "‚õî User Bans\nChoose an action:",
            "broadcast": "üì¢ Enter the announcement text:",
            "add_agent": "‚ûï Enter ID and role (agent/admin/manager, e.g., '123456 agent'):",
            "remove_agent": "‚ûñ Enter ID to remove role:",
            "ban": "‚õî Enter ID and ban hours (e.g., '123456 24'):",
            "unban": "‚úÖ Enter ID to unban:",
            "no_input": "‚ùå Enter data.",
            "report_staff_sent": "‚úÖ Complaint sent.",
            "report_bug_sent": "‚úÖ Bug report sent.",
            "report_staff_failed": "‚ùå Failed to send complaint.",
            "report_bug_failed": "‚ùå Failed to send bug report.",
            "broadcast_sent": "üì¢ Announcement sent!",
            "broadcast_failed": "‚ùå Failed to send announcement.",
            "self_agent": "‚ùå Cannot assign yourself.",
            "already_agent": "‚ùå id{agent_id} is already an agent.",
            "agent_added": "‚úÖ {role} id{agent_id} assigned.",
            "agent_added_notify": "",
            "self_remove": "‚ùå Cannot remove your own role.",
            "agent_removed": "‚úÖ {role} id{agent_id} removed.",
            "agent_removed_notify": "",
            "not_agent": "‚ùå id{agent_id} is not an agent.",
            "invalid_format": "‚ùå Format: {text}. Example: '{example}'.",
            "invalid_id": "‚ùå Enter a valid ID.",
            "self_ban": "‚ùå Cannot ban yourself.",
            "agent_ban": "‚ùå Cannot ban an agent.",
            "banned": "‚õî id{id} banned for {hours} hours.",
            "banned_notify": "‚õî You are banned for {hours} hours.",
            "unbanned": "‚úÖ id{target_id} unbanned.",
            "unbanned_notify": "‚úÖ You have been unbanned.",
            "not_banned": "‚ùå id{target_id} is not banned.",
            "banned_user": "‚õî You are banned. Try again later.",
            "chat_unavailable": "‚ùå Admin chat unavailable.",
            "error": "‚ùå Error. Try again.",
            "get_agents": "üìã List of agents:\n{agents_list}"
        }
    }

    _PREFIXES = {
        "staff": "üö® –ñ–ê–õ–û–ë–ê –ù–ê –ü–ï–†–°–û–ù–ê–õ",
        "bug": "üêõ –°–û–û–ë–©–ï–ù–ò–ï –û –ë–ê–ì–ï",
        "agent": "‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê –ê–ì–ï–ù–¢–ê",
        "broadcast": "üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï",
        "ban": "‚õî –ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
        "unban": "‚úÖ –†–ê–ó–ë–ê–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
        "add_agent": "‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê",
        "remove_agent": "‚ûñ –£–î–ê–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê"
    }

    _ERROR_MSGS = {
        917: "‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.",
        912: "‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
        27: "‚ùå –ú–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞."
    }

    def __init__(self, vk_token: str, admin_chat_id: int):
        self.vk_token = vk_token
        self.admin_chat_id = admin_chat_id
        self.vk_session = self._init_vk_session()
        self.vk = self.vk_session.get_api()
        self.upload = vk_api.VkUpload(self.vk_session)
        self._validate_tokens()
        self.longpoll = VkLongPoll(self.vk_session)
        self.rules = self._load_file('candyxpe_rules.txt', "–ü—Ä–∞–≤–∏–ª–∞ CandyxPE –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", text=True)
        self.user_contexts = {}
        self.user_ai_mode = set()
        self.user_action_mode = {}
        self.user_human_mode = set()
        self.user_languages = self._load_file('candyxpe_languages.json', {})
        self.banned_users = {}
        self.agents = self._load_file('candyxpe_agents.json', {})
        self._user_cache = {}
        self.system_prompt = (
            "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ CandyxPE. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å CandyxPE, –≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–π–º–ø–ª–µ–π, –±–∞–≥–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞ CandyxPE –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∏—Ö:\n{rules}\n\n"
            "–¢–≤–æ–π —Ç–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —Ç–æ—á–Ω–æ, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –ø—É–Ω–∫—Ç–µ 3.1, –Ω–∞–π–¥–∏ –∏ –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –µ–≥–æ –∏–∑ –ø—Ä–∞–≤–∏–ª. –ï—Å–ª–∏ –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∫–∞–∂–∏, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n"
            "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–¥, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–∑–ª–æ–º—É –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å CandyxPE. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –æ—Ç–≤–µ—á–∞–π: '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–≥–µ–Ω—Ç—É.'\n"
            "–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:\n- –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –±–∞–≥–µ: '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–∫–ª—é—á–∞—è –≤–∞—à ID –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.'\n- –ù–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∞–≤–∏–ª–µ: '–ü—É–Ω–∫—Ç 3.1 –≥–ª–∞—Å–∏—Ç: [—Ü–∏—Ç–∞—Ç–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª].'\n"
            "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π, —á—Ç–æ–±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —á—ë—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö CandyxPE."
        )

    def _init_vk_session(self):
        try:
            return vk_api.VkApi(token=self.vk_token)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK —Å–µ—Å—Å–∏–∏: {e}", extra={'user_id': 'N/A'})
            raise

    def _validate_tokens(self):
        try:
            self.vk.users.get(user_ids=1)
        except Exception as e:
            logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω: {e}", extra={'user_id': 'N/A'})
            raise

    def _load_file(self, path: str, default, text: bool = False):
        try:
            if not os.path.exists(path):
                self._save_file(path, default)
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read().strip() if text else json.load(f)
                if text and not content:
                    return default
                if text and len(content) > 100000:
                    logger.warning("–ü—Ä–∞–≤–∏–ª–∞ —É–∫–æ—Ä–æ—á–µ–Ω—ã", extra={'user_id': 'N/A'})
                    return content[:1000] + "..."
                return content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}", extra={'user_id': 'N/A'})
            return default

    def _save_file(self, path: str, data):
        try:
            with open(path, 'w', encoding='utf-8') as f:
                if isinstance(data, str):
                    f.write(data)
                else:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}", extra={'user_id': 'N/A'})

    def _handle_error(self, user_id: int, error: Exception, context: str):
        logger.error(f"{context}: {error}", extra={'user_id': user_id})
        self._send_message(user_id, "error", self._get_keyboard("main", user_id))

    @lru_cache(maxsize=128)
    def _get_user_info(self, user_id: int):
        try:
            user = self.vk.users.get(user_ids=user_id)[0]
            return f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [id{user_id}|{user['first_name']} {user['last_name']}]\nüì® –î–∏–∞–ª–æ–≥: https://vk.com/gim230630628?sel={user_id}"
        except Exception:
            return f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [id{user_id}|id{user_id}]\nüì® –î–∏–∞–ª–æ–≥: https://vk.com/gim230630628?sel={user_id}"

    def is_agent(self, user_id: int):
        return f"{user_id}" in self.agents

    def is_admin(self, user_id: int):
        return self.is_agent(user_id) and self.agents[f"{user_id}"].get("role") in ["admin", "manager"]

    def clean_message(self, message: str) -> str:
        return message.replace('*', '')

    @lru_cache(maxsize=256)
    def _get_keyboard(self, mode: str, user_id: int = None):
        lang = self.user_languages.get(f"{user_id}", "ru") if user_id else "ru"
        keyboards = {
            "main": {
                "ru": [
                    [{"action": {"type": "text", "payload": {"command": "ai_agent"}, "label": "ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç"}, "color": "primary"}],
                    [{"action": {"type": "text", "payload": {"command": "contact_agent"}, "label": "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–≥–µ–Ω—Ç–æ–º"}, "color": "secondary"}],
                    [{"action": {"type": "text", "payload": {"command": "report_staff"}, "label": "üë§ –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "report_bug"}, "label": "üêõ –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ"}, "color": "secondary"}],
                    [{"action": {"type": "text", "payload": {"command": "change_language"}, "label": "üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞"}, "color": "positive"}]
                ],
                "en": [
                    [{"action": {"type": "text", "payload": {"command": "ai_agent"}, "label": "ü§ñ AI Agent"}, "color": "primary"}],
                    [{"action": {"type": "text", "payload": {"command": "contact_agent"}, "label": "üë®‚Äçüíª Contact Agent"}, "color": "secondary"}],
                    [{"action": {"type": "text", "payload": {"command": "report_staff"}, "label": "üë§ Report Staff"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "report_bug"}, "label": "üêõ Report Bug"}, "color": "secondary"}],
                    [{"action": {"type": "text", "payload": {"command": "change_language"}, "label": "üåê Change Language"}, "color": "positive"}]
                ]
            },
            "ai": {
                "ru": [[{"action": {"type": "text", "payload": {"command": "end_ai"}, "label": "üîô –í—ã–π—Ç–∏ –∏–∑ –ò–ò"}, "color": "negative"}]],
                "en": [[{"action": {"type": "text", "payload": {"command": "end_ai"}, "label": "üîô Exit AI"}, "color": "negative"}]]
            },
            "human": {
                "ru": [[{"action": {"type": "text", "payload": {"command": "end_human"}, "label": "üîô –ù–∞–∑–∞–¥"}, "color": "negative"}]],
                "en": [[{"action": {"type": "text", "payload": {"command": "end_human"}, "label": "üîô Back"}, "color": "negative"}]]
            },
            "action": {
                "ru": [[{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "‚ùå –û—Ç–º–µ–Ω–∞"}, "color": "negative"}]],
                "en": [[{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "‚ùå Cancel"}, "color": "negative"}]]
            },
            "admin": {
                "ru": [
                    [{"action": {"type": "text", "payload": {"command": "manage_agents"}, "label": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏"}, "color": "primary"}],
                    [{"action": {"type": "text", "payload": {"command": "ban_user"}, "label": "‚õî –ë–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "broadcast"}, "label": "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô –ù–∞–∑–∞–¥"}, "color": "negative"}]
                ],
                "en": [
                    [{"action": {"type": "text", "payload": {"command": "manage_agents"}, "label": "üë• Manage Agents"}, "color": "primary"}],
                    [{"action": {"type": "text", "payload": {"command": "ban_user"}, "label": "‚õî User Bans"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "broadcast"}, "label": "üì¢ Send Announcement"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô Back"}, "color": "negative"}]
                ]
            },
            "manage_agents": {
                "ru": [
                    [{"action": {"type": "text", "payload": {"command": "add_agent"}, "label": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "remove_agent"}, "label": "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô –ù–∞–∑–∞–¥"}, "color": "secondary"}]
                ],
                "en": [
                    [{"action": {"type": "text", "payload": {"command": "add_agent"}, "label": "‚ûï Add Agent"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "remove_agent"}, "label": "‚ûñ Remove Agent"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô Back"}, "color": "secondary"}]
                ]
            },
            "ban_user": {
                "ru": [
                    [{"action": {"type": "text", "payload": {"command": "ban"}, "label": "‚õî –ó–∞–±–∞–Ω–∏—Ç—å"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "unban"}, "label": "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô –ù–∞–∑–∞–¥"}, "color": "secondary"}]
                ],
                "en": [
                    [{"action": {"type": "text", "payload": {"command": "ban"}, "label": "‚õî Ban"}, "color": "negative"}],
                    [{"action": {"type": "text", "payload": {"command": "unban"}, "label": "‚úÖ Unban"}, "color": "positive"}],
                    [{"action": {"type": "text", "payload": {"command": "cancel"}, "label": "üîô Back"}, "color": "secondary"}]
                ]
            }
        }
        buttons = keyboards.get(mode, keyboards["main"]).get(lang, keyboards["main"]["ru"])
        if user_id and mode == "main" and self.is_agent(user_id):
            buttons.insert(0, [{"action": {"type": "text", "payload": {"command": "admin_panel"}, "label": "üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if lang == "ru" else "üõ† Admin Panel"}, "color": "positive"}])
        return {"one_time": False, "buttons": buttons}

    def _send_to_admin(self, user_id: int, message: str, action: str, attachments: str = None):
        try:
            if not self.vk.messages.getConversationsById(peer_ids=2000000000 + self.admin_chat_id).get('items'):
                self._send_message(user_id, "chat_unavailable", self._get_keyboard("main", user_id))
                return False
        except vk_api.exceptions.ApiError as e:
            self._handle_error(user_id, e, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É (–∫–æ–¥: {e.code})")
            self._send_message(user_id, self._ERROR_MSGS.get(e.code, f"–û—à–∏–±–∫–∞: {e}"), self._get_keyboard("main", user_id))
            return False
        prefix = self._PREFIXES.get(action, "‚úÖ –°–û–û–ë–©–ï–ù–ò–ï")
        cleaned_message = self.clean_message(message)
        params = {
            "chat_id": self.admin_chat_id,
            "message": f"{prefix}{self._get_user_info(user_id)}\n\n{cleaned_message}",
            "random_id": get_random_id()
        }
        if attachments:
            params["attachment"] = attachments
        try:
            self.vk.messages.send(**params)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–∏–ø: {action}): {cleaned_message[:50]}...", extra={'user_id': user_id})
            return True
        except Exception as e:
            self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            self._send_message(user_id, "chat_unavailable", self._get_keyboard("main", user_id))
            return False

    def _send_broadcast(self, user_id: int, message: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        if not self.is_admin(user_id):
            self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))
            return False
        cleaned_message = self.clean_message(message)
        sent_count = 0
        failed = []
        for uid in self.user_languages:
            if int(uid) not in self.banned_users:
                try:
                    ulang = self.user_languages.get(f"{uid}", "ru")
                    self._send_message(int(uid), f"üì¢ {'–û–±—ä—è–≤–ª–µ–Ω–∏–µ' if ulang == 'ru' else 'Announcement'} CandyxPE:\n{cleaned_message}", self._get_keyboard("main", int(uid)), {"permission_check": self._check_user_permission(int(uid))})
                    sent_count += 1
                except vk_api.exceptions.ApiError as e:
                    if e.code != 901:
                        failed.append(uid)
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}", extra={'user_id': user_id})
                except Exception as e:
                    failed.append(uid)
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}", extra={'user_id': user_id})
        if failed:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {', '.join(failed)}", extra={'user_id': user_id})
        self._send_to_admin(user_id, f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} {'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' if lang == 'ru' else 'users'}.", "broadcast")
        return True

    def _send_message(self, user_id: int, message_key: str, keyboard: dict = None, info: dict = None):
        lang = self.user_languages.get(f"{user_id}", "ru")
        msg = self._MESSAGES[lang].get(message_key, message_key)
        if info:
            try:
                msg = msg.format(**info)
            except KeyError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", extra={'user_id': user_id})
                msg = message_key
        cleaned_message = self.clean_message(msg)
        params = {
            'user_id': user_id,
            'message': cleaned_message,
            'random_id': get_random_id()
        }
        if keyboard:
            params['keyboard'] = json.dumps(keyboard, ensure_ascii=False)
        if info and info.get('attachment'):
            params['attachment'] = info['attachment']
        try:
            if self._check_user_permission(user_id):
                self.vk.messages.send(**params)
            else:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", extra={'user_id': 'N/A'})
                self._send_message(user_id, "error", self._get_keyboard("main", user_id), {"message": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –≤–∞–º."})
        except vk_api.exceptions.ApiError as e:
            if e.code == 901:
                logger.warning(f"–û—à–∏–±–∫–∞ 901: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", extra={'user_id': 'N/A'})
                self._send_message(user_id, "error", self._get_keyboard("main", user_id), {"message": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –≤–∞–º."})
            else:
                self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        except Exception as e:
            self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

    def _check_user_permission(self, user_id: int) -> bool:
        try:
            self.vk.messages.isMessagesFromGroupAllowed(user_id=user_id, group_id=self.vk_session.group_id)
            return True
        except vk_api.exceptions.ApiError as e:
            if e.code == 901:
                return False
            raise
        except Exception:
            return True

    def _get_ai_response(self, user_id: int, message: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        try:
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            self.user_contexts[user_id].append({"role": "user", "content": message})
            self.user_contexts[user_id] = self.user_contexts[user_id][-5:]
            prompt = self.system_prompt.format(rules=self.rules)
            messages = [
                {"role": "system", "content": prompt},
                {"role": "system", "content": f"–ü—Ä–∞–≤–∏–ª–∞ CandyxPE:\n{self.rules}"}
            ] + self.user_contexts[user_id]
            response = g4f.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                max_tokens=500,
                temperature=0.7,
                timeout=5.0
            )
            if isinstance(response, str) and response.strip():
                cleaned_response = self.clean_message(response)
                self.user_contexts[user_id].append({"role": "assistant", "content": cleaned_response})
                return cleaned_response
            return self._MESSAGES[lang]["error"]
        except Exception as e:
            self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –ò–ò")
            return f"‚ùå –û—à–∏–±–∫–∞. {'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ' if lang == 'ru' else 'Contact support'} CandyxPE."

    def _handle_report(self, user_id: int, action: str, text: str, attachments: list):
        lang = self.user_languages.get(f"{user_id}", "ru")
        success_key = "report_staff_sent" if action == "staff" else "report_bug_sent"
        failure_key = "report_staff_failed" if action == "staff" else "report_bug_failed"
        cleaned_text = self.clean_message(text)
        if self._send_to_admin(user_id, cleaned_text, action, ",".join(attachments) if attachments else None):
            self._send_message(user_id, success_key, self._get_keyboard("main", user_id))
        else:
            self._send_message(user_id, failure_key, self._get_keyboard("main", user_id))
        self.user_action_mode.pop(user_id, None)

    def _handle_broadcast(self, user_id: int, text: str):
        if self._send_broadcast(user_id, text):
            self._send_message(user_id, "broadcast_sent", self._get_keyboard("admin", user_id))
        else:
            self._send_message(user_id, "broadcast_failed", self._get_keyboard("admin", user_id))
        self.user_action_mode.pop(user_id, None)

    def _handle_add_agent(self, user_id: int, text: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        try:
            parts = text.split()
            if len(parts) != 2 or parts[1] not in ["agent", "admin", "manager"]:
                raise ValueError
            agent_id, role = int(parts[0]), parts[1]
            if agent_id == user_id:
                self._send_message(user_id, "self_agent", self._get_keyboard("manage_agents", user_id))
            elif f"{agent_id}" in self.agents:
                self._send_message(user_id, "already_agent", self._get_keyboard("manage_agents", user_id), {"agent_id": agent_id})
            else:
                self.agents[f"{agent_id}"] = {"role": role}
                self._save_file('candyxpe_agents.json', self.agents)
                self._send_message(user_id, "agent_added", self._get_keyboard("admin", user_id), {"role": role.capitalize(), "agent_id": agent_id})
                self._send_to_admin(user_id, f"{role.capitalize()} id{agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.", "add_agent")
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_format", self._get_keyboard("action", user_id), {"text": "<ID> <agent/admin/manager>", "example": "123456 agent"})

    def _handle_remove_agent(self, user_id: int, text: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        try:
            agent_id = int(text)
            if agent_id == user_id:
                self._send_message(user_id, "self_remove", self._get_keyboard("manage_agents", user_id))
            elif f"{agent_id}" in self.agents:
                role = self.agents[f"{agent_id}"]["role"]
                del self.agents[f"{agent_id}"]
                self._save_file('candyxpe_agents.json', self.agents)
                self._send_message(user_id, "agent_removed", self._get_keyboard("admin", user_id), {"role": role.capitalize(), "agent_id": agent_id})
                self._send_to_admin(user_id, f"{role.capitalize()} id{agent_id} —Å–Ω—è—Ç.", "remove_agent")
            else:
                self._send_message(user_id, "not_agent", self._get_keyboard("manage_agents", user_id), {"agent_id": agent_id})
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_id", self._get_keyboard("action", user_id))

    def _handle_get_agents(self, user_id: int):
        lang = self.user_languages.get(f"{user_id}", "ru")
        if not self.is_admin(user_id) or self.agents[f"{user_id}"]["role"] != "manager":
            self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))
            return
        agents_list = "\n".join([f"@id{agent_id} - {role['role'].capitalize()}" for agent_id, role in self.agents.items()])
        self._send_message(user_id, "get_agents", self._get_keyboard("manage_agents", user_id), {"agents_list": agents_list or "–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤."})

    def _handle_ban(self, user_id: int, text: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        try:
            parts = text.split()
            if len(parts) != 2:
                raise ValueError
            target_id, hours = map(int, parts)
            if target_id == user_id:
                self._send_message(user_id, "self_ban", self._get_keyboard("ban_user", user_id))
            elif self.is_agent(target_id):
                self._send_message(user_id, "agent_ban", self._get_keyboard("ban_user", user_id))
            else:
                self.banned_users[target_id] = datetime.now() + timedelta(hours=hours)
                self._send_message(user_id, "banned", self._get_keyboard("ban_user", user_id), {"target_id": target_id, "hours": hours})
                self._send_message(target_id, "banned_notify", self._get_keyboard("main", user_id), {"hours": hours})
                self._send_to_admin(user_id, f"id{target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.", "ban")
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_format", self._get_keyboard("action", user_id), {"text": "<ID> <—á–∞—Å—ã>", "example": "123456 24"})

    def _handle_unban(self, user_id: int, text: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        try:
            target_id = int(text)
            if target_id in self.banned_users:
                del self.banned_users[target_id]
                self._send_message(user_id, "unbanned", self._get_keyboard("ban_user", user_id), {"target_id": target_id})
                self._send_message(target_id, "unbanned_notify", self._get_keyboard("main", user_id))
                self._send_to_admin(user_id, f"id{target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.", "unban")
            else:
                self._send_message(user_id, "not_banned", self._get_keyboard("ban_user", user_id), {"target_id": target_id})
            self.user_action_mode.pop(user_id, None)
        except ValueError:
            self._send_message(user_id, "invalid_id", self._get_keyboard("action", user_id))

    def _process_action(self, user_id: int, action: str, text: str, attachments: list):
        actions = {
            "staff": self._handle_report,
            "bug": self._handle_report,
            "broadcast": self._handle_broadcast,
            "add_agent": self._handle_add_agent,
            "remove_agent": self._handle_remove_agent,
            "ban": self._handle_ban,
            "unban": self._handle_unban
        }
        handler = actions.get(action)
        if handler:
            if action in ["staff", "bug"]:
                handler(user_id, action, text, attachments)
            else:
                handler(user_id, text)

    def _handle_command(self, user_id: int, cmd: str):
        lang = self.user_languages.get(f"{user_id}", "ru")
        commands = {
            "ai_agent": lambda: (
                self.user_ai_mode.add(user_id),
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "ai_on", self._get_keyboard("ai", user_id))
            ),
            "contact_agent": lambda: (
                self.user_human_mode.add(user_id),
                self.user_ai_mode.discard(user_id),
                self._send_to_admin(user_id, "–ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –∞–≥–µ–Ω—Ç—É." if lang == "ru" else "Player connected to agent.", "agent"),
                self._send_message(user_id, "human_on", self._get_keyboard("human", user_id))
            ),
            "end_human": lambda: (
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "human_off", self._get_keyboard("main", user_id))
            ),
            "report_staff": lambda: (
                self.user_action_mode.update({user_id: "staff"}),
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "report_staff", self._get_keyboard("action", user_id))
            ),
            "report_bug": lambda: (
                self.user_action_mode.update({user_id: "bug"}),
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "report_bug", self._get_keyboard("action", user_id))
            ),
            "change_language": lambda: (
                self.user_languages.update({f"{user_id}": "en" if lang == "ru" else "ru"}),
                self._save_file('candyxpe_languages.json', self.user_languages),
                self._send_message(user_id, "lang_changed", self._get_keyboard("main", user_id), {"lang": "–†—É—Å—Å–∫–∏–π" if lang == "en" else "English"})
            ),
            "end_ai": lambda: (
                self.user_ai_mode.discard(user_id),
                self.user_action_mode.pop(user_id, None),
                self.user_contexts.pop(user_id, None),
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "ai_off", self._get_keyboard("main", user_id))
            ),
            "cancel": lambda: (
                self.user_action_mode.pop(user_id, None),
                self.user_ai_mode.discard(user_id),
                self.user_human_mode.discard(user_id),
                self._send_message(user_id, "cancel", self._get_keyboard("main", user_id))
            ),
            "admin_panel": lambda: (
                self._send_message(user_id, "admin_panel" if self.is_agent(user_id) else "admin_denied", self._get_keyboard("admin" if self.is_agent(user_id) else "main", user_id))
            ),
            "manage_agents": lambda: (
                self._send_message(user_id, "manage_agents" if self.is_admin(user_id) else "admin_denied", self._get_keyboard("manage_agents" if self.is_admin(user_id) else "admin", user_id))
            ),
            "ban_user": lambda: (
                self._send_message(user_id, "ban_user" if self.is_admin(user_id) else "admin_denied", self._get_keyboard("ban_user" if self.is_admin(user_id) else "admin", user_id))
            ),
            "broadcast": lambda: (
                self.user_action_mode.update({user_id: "broadcast"}),
                self._send_message(user_id, "broadcast", self._get_keyboard("action", user_id))
            ) if self.is_admin(user_id) else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id)),
            "add_agent": lambda: (
                self.user_action_mode.update({user_id: "add_agent"}),
                self._send_message(user_id, "add_agent", self._get_keyboard("action", user_id))
            ) if self.is_admin(user_id) else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id)),
            "remove_agent": lambda: (
                self.user_action_mode.update({user_id: "remove_agent"}),
                self._send_message(user_id, "remove_agent", self._get_keyboard("action", user_id))
            ) if self.is_admin(user_id) else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id)),
            "ban": lambda: (
                self.user_action_mode.update({user_id: "ban"}),
                self._send_message(user_id, "ban", self._get_keyboard("action", user_id))
            ) if self.is_admin(user_id) else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id)),
            "unban": lambda: (
                self.user_action_mode.update({user_id: "unban"}),
                self._send_message(user_id, "unban", self._get_keyboard("action", user_id))
            ) if self.is_admin(user_id) else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id)),
            "getagents": lambda: (
                self._handle_get_agents(user_id)
            ) if self.is_admin(user_id) and self.agents[f"{user_id}"]["role"] == "manager" else self._send_message(user_id, "admin_denied", self._get_keyboard("admin", user_id))
        }
        commands.get(cmd, lambda: self._send_message(user_id, "unknown", self._get_keyboard("main", user_id)))()

    def _process_message(self, event):
        if event.type != VkEventType.MESSAGE_NEW or event.from_chat or not event.to_me:
            return
        user_id = event.user_id
        lang = self.user_languages.get(f"{user_id}", "ru")
        text = event.text.strip() if event.text else ""
        try:
            self.banned_users = {uid: expiry for uid, expiry in self.banned_users.items() if datetime.now() < expiry}
            if user_id in self.banned_users:
                self._send_message(user_id, "banned_user", self._get_keyboard("main", user_id))
                return
            if text.startswith('/'):
                cmd = text[1:].lower()
                self._handle_command(user_id, cmd)
                return
            if hasattr(event, 'payload') and event.payload:
                try:
                    payload = json.loads(event.payload.replace('\\"', '"'))
                    if isinstance(payload, dict) and "command" in payload:
                        self._handle_command(user_id, payload["command"])
                        return
                except json.JSONDecodeError as e:
                    self._handle_error(user_id, e, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload")
            if not text:
                self._send_message(user_id, "no_input", self._get_keyboard("main", user_id))
                return
            if user_id in self.user_human_mode:
                attachments = [
                    f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}"
                    for att in event.attachments.get("attachments", []) if att.get("type") in ["photo", "video"]
                ]
                cleaned_text = self.clean_message(text)
                self._send_to_admin(user_id, cleaned_text, "agent", ",".join(attachments) if attachments else None)
                return
            if user_id in self.user_action_mode:
                attachments = [
                    f"{att['type']}{att[att['type']]['owner_id']}_{att[att['type']]['id']}"
                    for att in event.attachments.get("attachments", []) if att.get("type") in ["photo", "video"]
                ]
                cleaned_text = self.clean_message(text)
                self._process_action(user_id, self.user_action_mode[user_id], cleaned_text, attachments)
                return
            if user_id in self.user_ai_mode:
                if text.lower() in {"–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø", "exit", "stop"}:
                    self._handle_command(user_id, "end_ai")
                else:
                    cleaned_text = self.clean_message(text)
                    ai_response = self._get_ai_response(user_id, cleaned_text)
                    self._send_message(user_id, ai_response, self._get_keyboard("ai", user_id))
                return
            if text.lower() in {"–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "start", "hello"}:
                self._send_message(user_id, "welcome", self._get_keyboard("main", user_id))
            else:
                self._send_message(user_id, "unknown", self._get_keyboard("main", user_id))
        except Exception as e:
            self._handle_error(user_id, e, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def run(self):
        print(f"\nüöÄ CandyxPE v{VERSION} ({CODE_NAME})\n{'-'*40}")
        print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ CandyxPE by vatkovskydev\n{'-'*40}\n")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", extra={'user_id': 'N/A'})
        while True:
            try:
                for event in self.longpoll.listen():
                    self._process_message(event)
            except Exception as e:
                self._handle_error('N/A', e, "–û—à–∏–±–∫–∞ LongPoll")
                time.sleep(5)

if __name__ == "__main__":
    VK_TOKEN = "vk1.a.BfB4WDbOxfqsQLqcONRk3lrcEmTW9BmnMYiU8xLbZKjRUkGDUkdmpvNi2nFMCAzX_lOwYqHBM2VubFepkpraAuBJ50JWXIX0mWfwPbBMbtGbKrOhhZYROaAlkGeqA1L-8Z-aa35kp00rRGjOooH87hoEZmWGxPBhBEg7Q4SC-1S-CoCR2hZp9QEZS7-i8TrfyucOUrFApTJE5N4hhTOG7Q"
    ADMIN_CHAT_ID = 1
    bot = CandyxPEBot(VK_TOKEN, ADMIN_CHAT_ID)
    bot.run()